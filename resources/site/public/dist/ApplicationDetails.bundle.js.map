{"version":3,"sources":["webpack:///./source/src/app/components/Applications/Listing/DeleteConfirmation.jsx","webpack:///./node_modules/@material-ui/icons/HighlightOff.js","webpack:///./source/src/app/components/Shared/ApiKey.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ApiKeyManager.jsx","webpack:///./source/src/app/components/Apis/Listing/SubscriptionPolicySelect.jsx","webpack:///./source/src/app/components/Apis/Listing/APICardView.jsx","webpack:///./source/src/app/components/Applications/Details/Invoice.jsx","webpack:///./source/src/app/components/Applications/Details/SubscriptionTableData.jsx","webpack:///./source/src/app/components/Applications/Details/Subscriptions.jsx","webpack:///./source/src/app/components/Applications/Details/InfoBar.jsx","webpack:///./source/src/app/components/Applications/Details/Overview.jsx","webpack:///./source/src/app/components/Applications/Details/index.jsx"],"names":["DeleteConfirmation","props","handleAppDelete","isDeleteOpen","toggleDeleteConfirmation","open","transition","Slide","id","defaultMessage","dense","onClick","size","variant","color","propTypes","PropTypes","func","isRequired","bool","_interopRequireDefault","Object","defineProperty","exports","value","default","_react","_default","createElement","d","tokens","infiniteValidity","setInfiniteValidity","useState","invalidTimeout","setInvaildTimeout","handleChange","field","event","accessTokenRequest","updateAccessTokenRequest","newRequest","target","currentTarget","checked","timeout","undefined","Validation","number","validate","error","classes","intl","Fragment","FormControl","margin","className","FormControlLabel","control","Checkbox","onChange","e","label","TextField","required","formatMessage","InputLabelProps","shrink","helperText","fullWidth","name","placeholder","autoFocus","inputText","contextTypes","shape","injectIntl","withStyles","theme","width","padding","ApiKeyManager","React","Component","constructor","super","this","setState","showToken","selectedApp","keyType","API","generateApiKey","appId","state","then","response","console","log","apikey","accessToken","body","validityTime","isOauth","catch","status","notFound","render","root","Typography","keyTitle","toLowerCase","FormGroup","row","formGroup","Grid","container","spacing","item","xs","gridWrapper","Button","handleClickOpen","component","formLabel","Dialog","onClose","handleClose","aria-labelledby","DialogTitle","dialogTitle","DialogContent","dialogContent","DialogContentText","ApiKey","ViewToken","token","DialogActions","generateKeys","disabled","tokenType","string","button","marginLeft","tokenSection","marginTop","marginBottom","marginRight","keyConfigWrapper","flexDirection","generateWrapper","paper","display","textTransform","SubscriptionPolicySelect","selectedPolicy","componentDidMount","policies","apiId","handleSubscribe","applicationId","Select","select","map","policy","MenuItem","key","ScopeValidation","resourcePath","resourcePaths","SUBSCRIPTIONS","resourceMethod","resourceMethods","POST","buttonGap","object","withTheme","APICardView","xhrRequest","data","list","pagination","total","count","updateUnsubscribedAPIsList","setTenantDomain","code","Alert","finally","loading","searchText","page","rowsPerPage","api","getAllAPIs","query","limit","offset","pageType","getData","componentDidUpdate","prevProps","subscriptions","length","getIdsOfSubscribedEntities","sub","filter","Boolean","subscribedIds","i","includes","advertiseInfo","advertised","isSubscriptionAvailable","throttlingPolicies","apisNotFound","ResourceNotFound","columns","options","customBodyRender","tableMeta","updateValue","rowData","app","search","title","print","download","viewColumns","customToolbar","responsive","serverSide","onTableChange","action","tableState","changePage","selectableRows","onChangeRowsPerPage","numberOfRows","Loading","NoApi","filterType","sort","selectableRowsHeader","Invoice","subscriptionId","isMonetizedAPI","isDynamicUsagePolicy","showPopup","setShowPopup","showErrorPopup","setShowErrorPopup","invoice","setInvoice","handleAlertClose","Subscription","getMonetizationInvoice","obj","invoiceData","properties","keys","invoiveItem","insideArray","push","SubscriptionTableData","openMenu","handleRequestClose","bind","handleRequestOpen","handleRequestDelete","checkIfDynamicUsagePolicy","checkIfMonetizedAPI","handleSubscriptionDelete","apiUUID","Api","getAPIById","apiData","JSON","parse","monetization","enabled","subscriptionUUID","getSubscription","subscriptionData","throttlingPolicy","getTierByName","policyResponse","policyData","monetizationAttributes","billingType","subscription","apiInfo","link","to","version","TableRow","hover","TableCell","style","paddingLeft","lifeCycleStatus","SINGLE_SUBSCRIPTION","DELETE","IconButton","aria-label","Icon","Subscriptions","unsubscribedAPIList","subscriptionsNotFound","isAuthorize","openDialog","updateSubscriptions","handleOpenDialog","handleSearchTextChange","handleSearchTextTmpChange","handleClearSearch","handleEnterPress","searchTextTmp","match","params","prevState","client","subscriptionLimit","getSubscriptions","deleteSubscription","info","endpointIndex","prototype","hasOwnProperty","call","splice","subscribe","keyCode","preventDefault","window","location","context","titleWrapper","buttonElm","xl","genericMessageWrapper","InlineMessage","type","dialogContainer","Card","card","CardActions","gutterBottom","cardTitle","Divider","CardContent","cardContent","Table","TableHead","firstCell","TableBody","maxWidth","fullScreen","disableTypography","Box","searchWrapper","Paper","searchRoot","clearSearchIcon","InputBase","input","inputProps","onKeyDown","iconButton","searchResults","closeButton","Progress","alignItems","flex","divider","height","minHeight","paddingBottom","paddingTop","paddingRight","cursor","InfoBar","showOverview","applicationOwner","toggleOverview","handleDeleteConfimation","getApplication","owner","promisedPolicy","Promise","all","application","tier","tierDescription","description","todo","promisedDelete","Application","deleteApp","message","ok","history","custom","leftMenu","position","isUserOwner","AuthManager","getUser","infoBarMain","linkTitle","align","subscriptionCount","VerticalDivider","m","editButton","withRouter","mainBack","infoBar","background","infoBarHeight","starColor","palette","getContrastText","borderBottom","grey","A200","backIcon","primary","main","fontSize","backText","fontFamily","typography","starRate","starRateMy","rateLink","lineHeight","topBar","infoContent","infoContentBottom","sliderBackground","bootstrapRoot","bootstrapInput","borderRadius","backgroundColor","common","white","border","transitions","create","join","borderColor","boxShadow","epWrapper","prodLabel","contentWrapper","contentAreaWidth","ratingBoxWrapper","ratingBox","top","left","userRating","verticalDividerStar","borderLeft","backLink","textDecoration","ratingSummery","buttonView","textAlign","justifyContent","buttonOverviewText","appNameXSmall","whiteSpace","overflowX","overflowY","appNameSmall","appNameMid","appNameBig","useStyles","makeStyles","table","minWidth","leftCol","iconAligner","iconTextWrapper","iconEven","iconEvenColor","iconOdd","iconOddColor","noKeysRoot","backgroundImage","overviewPage","keysBackground","backgroundPosition","backgroundRepeat","backgroundSize","heading","emptyBox","summaryRoot","actionPanel","setApplication","setTierDescription","setNotFound","useEffect","promisedTier","tierResponse","pathPrefix","scope","TOKEN_TYPES","displayName","attributes","attr","index","attrValue","classNames","lg","ExpansionPanel","defaultExpanded","ExpansionPanelSummary","content","ExpansionPanelDetails","TokenManager","hashEnabled","summary","ExpansionPanelActions","Details","menuLink","pathname","application_uuid","active","secScheme","redirectUrl","rootIconSize","rootIconTextVisible","rootIconVisible","prefix","sufix","Helmet","LeftMenu","leftMenuHorizontal","leftMenuVerticalLeft","leftMenuVerticalRight","leftLInkMain","CustomIcon","icon","leftLInkMainText","LeftMenuItem","text","iconText","route","submenu","innerRef","node","contentLoader","contentLoaderRightMenu","exact","from","path","Overview","renderManager","shiftToLeft","shiftToRight","leftMenuPaddingLeft","bottom","right","borderRight","rootBackground","detailsContent"],"mappings":"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","file":"ApplicationDetails.bundle.js","sourcesContent":["import React from 'react';\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@material-ui/core/';\nimport Slide from '@material-ui/core/Slide';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nconst DeleteConfirmation = (props) => {\n    const { handleAppDelete, isDeleteOpen, toggleDeleteConfirmation } = props;\n    return (\n        <Dialog open={isDeleteOpen} transition={Slide}>\n            <DialogTitle>\n                <FormattedMessage\n                    id='Applications.Listing.DeleteConfirmation.dialog.title'\n                    defaultMessage='Delete Application'\n                />\n            </DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    <FormattedMessage\n                        id='Applications.Listing.DeleteConfirmation.dialog.text.description'\n                        defaultMessage='The application will be removed'\n                    />\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button dense onClick={toggleDeleteConfirmation}>\n                    <FormattedMessage\n                        id='Applications.Listing.DeleteConfirmation.dialog.cancel'\n                        defaultMessage='Cancel'\n                    />\n                </Button>\n                <Button\n                    size='small'\n                    variant='outlined'\n                    color='primary'\n                    onClick={handleAppDelete}\n                >\n                    <FormattedMessage\n                        id='Applications.Listing.DeleteConfirmation.dialog,delete'\n                        defaultMessage='Delete'\n                    />\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\nDeleteConfirmation.propTypes = {\n    handleAppDelete: PropTypes.func.isRequired,\n    isDeleteOpen: PropTypes.bool.isRequired,\n    toggleDeleteConfirmation: PropTypes.func.isRequired,\n};\nexport default DeleteConfirmation;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M14.59 8L12 10.59 9.41 8 8 9.41 10.59 12 8 14.59 9.41 16 12 13.41 14.59 16 16 14.59 13.41 12 16 9.41 14.59 8zM12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"\n}), 'HighlightOff');\n\nexports.default = _default;","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Validation from 'AppData/Validation';\n\n// Styles for Grid and Paper elements\nconst styles = theme => ({\n    FormControl: {\n        'margin-bottom': '8px',\n        width: '100%',\n        padding: '0px 10px',\n    },\n});\n\n/**\n * Used to display generate api key in UI\n */\nconst tokens = (props) => {\n    const [infiniteValidity, setInfiniteValidity] = useState(true);\n    const [invalidTimeout, setInvaildTimeout] = useState(false);\n\n    /**\n    * This method is used to handle the updating of create api key\n    * request object.\n    * @param {*} field\n    * @param {*} event event fired\n    */\n    const handleChange = (field, event) => {\n        const { accessTokenRequest, updateAccessTokenRequest } = props;\n        const newRequest = { ...accessTokenRequest };\n\n        const { target: currentTarget } = event;\n\n        switch (field) {\n            case 'infiniteValidity':\n                setInfiniteValidity(currentTarget.checked);\n                if (currentTarget.checked) {\n                    newRequest.timeout = -1;\n                } else {\n                    newRequest.timeout = null;\n                }\n                break;\n            case 'timeout':\n                if (Validation.number.validate(currentTarget.value).error === undefined) {\n                    newRequest.timeout = currentTarget.value;\n                    setInvaildTimeout(false);\n                } else {\n                    newRequest.timeout = null;\n                    setInvaildTimeout(true);\n                }\n                break;\n            default:\n                break;\n        }\n        updateAccessTokenRequest(newRequest);\n    };\n    const { classes, intl, accessTokenRequest } = props;\n\n    return (\n        <React.Fragment>\n            <FormControl margin='normal' className={classes.FormControl}>\n                <FormControlLabel\n                    control={<Checkbox\n                        checked={infiniteValidity}\n                        onChange={e => handleChange('infiniteValidity', e)}\n                        value={accessTokenRequest.timeout}\n                        color='primary'\n                    />}\n                    label='API Key with infinite validity period'\n                />\n                {!infiniteValidity && <TextField\n                    required\n                    label={intl.formatMessage({\n                        defaultMessage: 'API Key validity period',\n                        id: 'Shared.AppsAndKeys.Tokens.apikey',\n                    })}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                    helperText={\n                        invalidTimeout ? (\n                            intl.formatMessage({\n                                defaultMessage: 'Please use a valid number for API Key expiry time',\n                                id: 'Shared.AppsAndKeys.Tokens.apikey.set.validity.error',\n                            })\n                        ) : (\n                            intl.formatMessage({\n                                defaultMessage: 'You can set an expiration period to determine the validity period of '\n                                + 'the token after generation. Set this as -1 to ensure that the '\n                                + 'apikey never expires.',\n                                id: 'Shared.AppsAndKeys.Tokens.apikey.set.validity.help',\n                            })\n                        )\n                    }\n                    fullWidth\n                    name='timeout'\n                    onChange={e => handleChange('timeout', e)}\n                    placeholder={intl.formatMessage({\n                        defaultMessage: 'Enter time in seconds',\n                        id: 'Shared.AppsAndKeys.Tokens.apikey.enter.time',\n                    })}\n                    value={accessTokenRequest.timeout}\n                    autoFocus\n                    className={classes.inputText}\n                    error={invalidTimeout}\n                />\n                }\n            </FormControl>\n        </React.Fragment>\n    );\n};\ntokens.contextTypes = {\n    intl: PropTypes.shape({}).isRequired,\n};\nexport default injectIntl(withStyles(styles)(tokens));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport API from 'AppData/api';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Grid from '@material-ui/core/Grid';\nimport ViewToken from './ViewToken';\nimport ApiKey from '../ApiKey';\n\nconst styles = (theme) => ({\n    root: {\n        padding: theme.spacing(3),\n    },\n    button: {\n        marginLeft: theme.spacing(5),\n        padding: '10px',\n    },\n    tokenSection: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    margin: {\n        marginRight: theme.spacing(2),\n    },\n    keyConfigWrapper: {\n        flexDirection: 'column',\n        marginBottom: 0,\n    },\n    generateWrapper: {\n        padding: '10px',\n        'margin-inline-end': 'auto',\n    },\n    paper: {\n        display: 'flex',\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        marginLeft: theme.spacing(10),\n    },\n    dialogTitle: {\n        padding: '24px 24px 0px',\n    },\n    dialogContent: {\n        padding: '0 24px 0px',\n    },\n    formGroup: {\n        padding: '20px',\n    },\n    gridWrapper: {\n        'align-self': 'center',\n    },\n    keyTitle: {\n        textTransform: 'capitalize',\n    },\n});\n\nclass ApiKeyManager extends React.Component {\n    constructor(props) {\n        super(props);\n        const { classes, selectedApp, keyType } = this.props;\n        this.state = {\n            apikey: null,\n            open: false,\n            showToken: false,\n            accessTokenRequest: {\n                timeout: -1,\n            },\n        };\n    }\n\n    handleClose = () => {\n        this.setState(() => ({ open: false, accessTokenRequest: { timeout: -1 } }));\n    }\n\n    handleClickOpen = () => {\n        this.setState(() => ({ open: true, showToken: false }));\n    }\n\n    updateAccessTokenRequest = (accessTokenRequest) => {\n        this.setState(() => ({ accessTokenRequest }));\n    }\n\n    generateKeys = (selectedApp, keyType) => {\n        const client = new API();\n        const promisedKey = client.generateApiKey(selectedApp.appId, keyType, this.state.accessTokenRequest.timeout);\n        promisedKey\n            .then((response) => {\n                console.log('Non empty response received');\n                const apikey = { accessToken: response.body.apikey, validityTime: response.body.validityTime, isOauth: false };\n                this.setState(() => ({ apikey, open: true, showToken: true }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    }\n\n    render() {\n        const { classes, selectedApp, keyType } = this.props;\n        const {\n            showToken, accessTokenRequest, open, apikey,\n        } = this.state;\n        return (\n            <div className={classes.root}>\n                <Typography variant='h5' className={classes.keyTitle}>\n                    {keyType.toLowerCase() + ' '}\n                    <FormattedMessage\n                        defaultMessage='API Key'\n                        id='Shared.AppsAndKeys.TokenManager.ApiKey'\n                    />\n                </Typography>\n                <FormGroup row className={classes.formGroup}>\n                    <Grid container spacing={3}>\n                        <Grid item xs={12} className={classes.gridWrapper}>\n                            <div>\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={this.handleClickOpen}\n                                >\n                                    {'Generate Key'}\n                                </Button>\n                            </div>\n                            <Typography component='div' variant='body2' className={classes.formLabel}>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ApiKeyManager.generate.key.help'\n                                    defaultMessage='Use the Generate Key button to generate a self-contained JWT token.'\n                                />\n                            </Typography>\n\n                        </Grid>\n                    </Grid>\n                </FormGroup>\n                <Dialog open={open} onClose={this.handleClose} aria-labelledby='form-dialog-title'>\n                    <DialogTitle id='responsive-dialog-title' className={classes.dialogTitle}>\n                        {'Generate API Key'}\n                    </DialogTitle>\n                    <DialogContent className={classes.dialogContent}>\n                        <DialogContentText>\n                            {!showToken && (\n                                <ApiKey\n                                    updateAccessTokenRequest={this.updateAccessTokenRequest}\n                                    accessTokenRequest={accessTokenRequest}\n                                />\n                            )}\n                            {showToken && <ViewToken token={apikey} />}\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        {!showToken && (\n                            <Button onClick={() => this.generateKeys(selectedApp, keyType)} disabled={!accessTokenRequest.timeout} color='primary'>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n                                    defaultMessage='Generate'\n                                />\n                            </Button>\n                        )}\n                        <Button onClick={this.handleClose} color='primary' autoFocus>\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n                                defaultMessage='Close'\n                            />\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nApiKeyManager.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    selectedApp: PropTypes.shape({\n        tokenType: PropTypes.string.isRequired,\n    }).isRequired,\n    keyType: PropTypes.string.isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(ApiKeyManager));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport { FormattedMessage } from 'react-intl';\nimport { ScopeValidation, resourceMethods, resourcePaths } from '../../Shared/ScopeValidation';\n\n/**\n *\n *\n * @param {*} theme\n */\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n    },\n    buttonGap: {\n        marginLeft: 20,\n    },\n    select: {\n        width: 100,\n    },\n});\n\n/**\n *\n *\n * @class SubscriptionPolicySelect\n * @extends {React.Component}\n */\nclass SubscriptionPolicySelect extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedPolicy: null,\n        };\n    }\n\n    /**\n     *\n     *\n     * @returns\n     * @memberof SubscriptionPolicySelect\n     */\n    componentDidMount() {\n        const { policies } = this.props;\n\n        this.setState({ selectedPolicy: policies[0] });\n    }\n\n    /**\n     *\n     *\n     * @returns\n     * @memberof SubscriptionPolicySelect\n     */\n    render() {\n        const {\n            classes, policies, apiId, handleSubscribe, applicationId,\n        } = this.props;\n        const { selectedPolicy } = this.state;\n\n        return (\n            policies\n            && (\n                <div className={classes.root}>\n                    <Select\n                        className={classes.select}\n                        value={selectedPolicy}\n                        onChange={(e) => {\n                            this.setState({ selectedPolicy: e.target.value });\n                        }}\n                    >\n                        {policies.map(policy => (\n                            <MenuItem value={policy} key={policy}>\n                                {policy}\n                            </MenuItem>\n                        ))}\n\n                    </Select>\n                    <ScopeValidation\n                        resourcePath={resourcePaths.SUBSCRIPTIONS}\n                        resourceMethod={resourceMethods.POST}\n                    >\n                        <Button\n                            variant='contained'\n                            size='small'\n                            color='primary'\n                            className={classes.buttonGap}\n                            onClick={() => {\n                                handleSubscribe(applicationId, apiId, selectedPolicy);\n                            }}\n                        >\n                            <FormattedMessage defaultMessage='Subscribe' id='Apis.Listing.SubscriptionPolicySelect.subscribe' />\n                        </Button>\n                    </ScopeValidation>\n                </div>\n            )\n        );\n    }\n}\n\nSubscriptionPolicySelect.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles, { withTheme: true })(SubscriptionPolicySelect);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport MUIDataTable from 'mui-datatables';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport API from 'AppData/api';\nimport NoApi from 'AppComponents/Apis/Listing/NoApi';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport ResourceNotFound from '../../Base/Errors/ResourceNotFound';\nimport SubscriptionPolicySelect from './SubscriptionPolicySelect';\n\n\n/**\n *\n *\n * @param {*} theme\n */\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n    },\n    buttonGap: {\n        marginRight: 10,\n    },\n});\n\n/**\n *\n *\n * @class APICardView\n * @extends {React.Component}\n */\nclass APICardView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: null,\n            loading: true,\n        };\n        this.page = 0;\n        this.count = 100;\n        this.rowsPerPage = 10;\n        this.pageType = null;\n    }\n    componentDidMount() {\n        this.getData();\n    }\n\n    componentDidUpdate(prevProps) {\n        const { subscriptions, searchText } = this.props;\n        if ( subscriptions.length !== prevProps.subscriptions.length ) {\n            this.getData();\n        } else if (searchText !== prevProps.searchText) {\n            this.page = 0;\n            this.getData();\n        }\n    }\n\n    // get data\n    getData = () => {\n        const { intl } = this.props;\n        this.xhrRequest()\n            .then((data) => {\n                const { body } = data;\n                const { list, pagination } = body;\n                const { total } = pagination;\n                this.count = total;\n                this.setState({ data: this.updateUnsubscribedAPIsList(list) });\n            })\n            .catch((error) => {\n                const { response } = error;\n                const { setTenantDomain } = this.props;\n                if (response && response.body.code === 901300) {\n                    setTenantDomain('INVALID');\n                    Alert.error(intl.formatMessage({\n                        defaultMessage: 'Invalid tenant domain',\n                        id: 'Apis.Listing.ApiTableView.invalid.tenant.domain',\n                    }));\n                } else {\n                    Alert.error(intl.formatMessage({\n                        defaultMessage: 'Error While Loading APIs',\n                        id: 'Apis.Listing.ApiTableView.error.loading',\n                    }));\n                }\n            })\n            .finally(() => {\n                this.setState({ loading: false });\n            });\n    };\n\n    xhrRequest = () => {\n        const { searchText } = this.props;\n        const { page, rowsPerPage } = this;\n        const api = new API();\n\n        if (searchText && searchText !== '') {\n            return api.getAllAPIs({ query: searchText, limit: this.rowsPerPage, offset: page * rowsPerPage });\n        } else {\n            return api.getAllAPIs({ limit: this.rowsPerPage, offset: page * rowsPerPage });\n        }\n    };\n\n    changePage = (page) => {\n        const { intl } = this.props;\n        this.page = page;\n        this.setState({ loading: true });\n        this.xhrRequest()\n            .then((data) => {\n                const { body } = data;\n                const { list } = body;\n                this.setState({\n                    data: this.updateUnsubscribedAPIsList(list),\n                });\n            })\n            .catch((e) => {\n                Alert.error(intl.formatMessage({\n                    defaultMessage: 'Error While Loading APIs',\n                    id: 'Apis.Listing.ApiTableView.error.loading',\n                }));\n            })\n            .finally(() => {\n                this.setState({ loading: false });\n            });\n    };\n\n    /**\n        *\n        * Get List of the Ids of all APIs that have been already subscribed\n        *\n        * @returns {*} Ids of respective APIs\n        * @memberof APICardView\n        */\n    getIdsOfSubscribedEntities() {\n        const { subscriptions } = this.props;\n\n        // Get arrays of the API Ids and remove all null/empty references by executing 'fliter(Boolean)'\n        const subscribedAPIIds = subscriptions.map((sub) => sub.apiId).filter(Boolean);\n\n        return subscribedAPIIds;\n    }\n\n    /**\n    *\n    * Update list of unsubscribed APIs\n    * @memberof APICardView\n    */\n    updateUnsubscribedAPIsList(list) {\n\n        const subscribedIds = this.getIdsOfSubscribedEntities();\n        for (let i = 0; i < list.length; i++) {\n            if ((!subscribedIds.includes(list[i].id) && !list[i].advertiseInfo.advertised)\n                && list[i].isSubscriptionAvailable) {\n            } else {\n                list[i].throttlingPolicies = null;\n            }\n        }\n        return list;\n        //return unsubscribedAPIList;\n\n    }\n\n    /**\n     *\n     *\n     * @returns\n     * @memberof APICardView\n     */\n    render() {\n        const { apisNotFound } = this.props;\n        const { loading, data } = this.state;\n        const { page, count, rowsPerPage } = this;\n\n        if (apisNotFound) {\n            return <ResourceNotFound />;\n        }\n\n        const {\n            theme, handleSubscribe, applicationId, intl,\n        } = this.props;\n        const columns = [\n            {\n                name: 'id',\n                label: intl.formatMessage({\n                    id: 'Apis.Listing.APIList.id',\n                    defaultMessage: 'Id',\n                }),\n                options: {\n                    display: 'excluded',\n                },\n            },\n            {\n                name: 'name',\n                label: intl.formatMessage({\n                    id: 'Apis.Listing.APIList.name',\n                    defaultMessage: 'Name',\n                }),\n            },\n            {\n                name: 'throttlingPolicies',\n                label: intl.formatMessage({\n                    id: 'Apis.Listing.APIList.policy',\n                    defaultMessage: 'Policy',\n                }),\n                options: {\n                    customBodyRender: (value, tableMeta, updateValue) => {\n                        if (tableMeta.rowData) {\n                            const apiId = tableMeta.rowData[0];\n                            const policies = value;\n                            if (!policies) {\n                                return (intl.formatMessage({\n                                    id: 'Apis.Listing.APICardView.already.subscribed',\n                                    defaultMessage: 'Subscribed',\n                                }))\n                            }\n                            return (\n                                <SubscriptionPolicySelect\n                                    key={apiId}\n                                    policies={policies}\n                                    apiId={apiId}\n                                    handleSubscribe={(app, api, policy) => handleSubscribe(app, api, policy)}\n                                    applicationId={applicationId}\n                                />\n                            );\n                        }\n                    },\n                },\n            },\n        ];\n        const options = {\n            search: false,\n            title: false,\n            filter: false,\n            print: false,\n            download: false,\n            viewColumns: false,\n            customToolbar: false,\n            responsive: 'stacked',\n            serverSide: true,\n            count,\n            page,\n            onTableChange: (action, tableState) => {\n                switch (action) {\n                    case 'changePage':\n                        this.changePage(tableState.page);\n                        break;\n                }\n            },\n            selectableRows: 'none',\n            rowsPerPage,\n            onChangeRowsPerPage: (numberOfRows) => {\n                const { page, count } = this;\n                if (page * numberOfRows > count) {\n                    this.page = 0;\n                }\n                this.rowsPerPage = numberOfRows;\n                this.getData();\n            },\n        };\n        if (loading) {\n            return <Loading />;\n        }\n        if ((data && data.length === 0) || !data) {\n            return <NoApi />;\n        }\n        return (\n            <MUIDataTable\n                title={''}\n                data={data}\n                columns={columns}\n                options={options}\n            />\n        );\n    }\n}\n\nAPICardView.propTypes = {\n    classes: PropTypes.object.isRequired,\n    theme: PropTypes.object.isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\nexport default injectIntl(withStyles(styles, { withTheme: true })(APICardView));\n","/*\n * Copyright (c), WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport MUIDataTable from 'mui-datatables';\n\nimport { FormattedMessage } from 'react-intl';\nimport Subscription from 'AppData/Subscription';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nconst columns = ['Name', 'Value'];\n\nconst options = {\n    filterType: 'checkbox',\n    sort: false,\n    search: false,\n    viewColumns: false,\n    filter: false,\n    selectableRowsHeader: false,\n    selectableRows: 'none',\n    pagination: false,\n    download: false,\n};\n\nfunction Invoice(props) {\n    const { subscriptionId, isMonetizedAPI, isDynamicUsagePolicy } = props;\n    const [showPopup, setShowPopup] = useState(false);\n    const [showErrorPopup, setShowErrorPopup] = useState(false);\n    const [invoice, setInvoice] = useState(null);\n\n    /**\n     * Handle the popup for invoice\n     */\n    const handlePopup = () => {\n        setShowPopup(true);\n        setInvoice(null);\n        const client = new Subscription();\n        const promiseInvoice = client.getMonetizationInvoice(subscriptionId);\n        promiseInvoice.then((response) => {\n            if (response && response.obj) {\n                const invoiceData = [];\n                const { obj: { properties } } = response;\n                Object.keys(properties).map((invoiveItem) => {\n                    const insideArray = [];\n                    insideArray.push(invoiveItem);\n                    insideArray.push(properties[invoiveItem]);\n                    invoiceData.push(insideArray);\n                });\n                setInvoice(invoiceData);\n            }\n        }).catch((error) => {\n            console.error(error);\n            setShowErrorPopup(true);\n        });\n    };\n\n    /**\n     * Handle closing the popup for invoice\n     */\n    const handleClose = () => {\n        setShowPopup(false);\n    };\n\n    const handleAlertClose = () => {\n        setShowErrorPopup(false);\n    };\n\n    return (\n        <React.Fragment>\n            <Button\n                variant='outlined'\n                size='small'\n                color='primary'\n                disabled={false}\n                onClick={handlePopup}\n            >\n                <FormattedMessage\n                    id='Applications.Details.Invoice.view.btn'\n                    defaultMessage='View Invoice'\n                />\n            </Button>\n            {invoice ? (\n                <Dialog open={showPopup} onClose={handleClose} fullWidth='true'>\n                    {invoice && (<MUIDataTable\n                        title='Upcoming Invoice'\n                        data={invoice}\n                        columns={columns}\n                        options={options}\n                    />) }\n                </Dialog>\n            ) : (\n                <Dialog open={showErrorPopup} onClose={handleAlertClose} fullWidth='true'>\n                    <DialogTitle>No Data Available</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id='invoice-dialog-description'>\n                        Pending invoice data not found for this subscription.\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleAlertClose} color='primary'>\n                        Close\n                        </Button>\n                    </DialogActions>\n                </Dialog>)}\n        </React.Fragment>\n    );\n}\n\nInvoice.propTypes = {\n    subscriptionId: PropTypes.string.isRequired,\n};\n\nexport default Invoice;\n","/*\n * Copyright (c), WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@material-ui/core/Icon';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Slide from '@material-ui/core/Slide';\nimport Button from '@material-ui/core/Button';\nimport { FormattedMessage } from 'react-intl';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport PropTypes from 'prop-types';\nimport Api from 'AppData/api';\nimport Subscription from 'AppData/Subscription';\nimport Invoice from './Invoice';\n\n/**\n *\n *\n * @class SubscriptionTableData\n * @extends {React.Component}\n */\nclass SubscriptionTableData extends React.Component {\n    /**\n     *Creates an instance of SubscriptionTableData.\n     * @param {*} props properties\n     * @memberof SubscriptionTableData\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            openMenu: false,\n            isMonetizedAPI: false,\n            isDynamicUsagePolicy: false,\n        };\n        this.handleRequestClose = this.handleRequestClose.bind(this);\n        this.handleRequestOpen = this.handleRequestOpen.bind(this);\n        this.handleRequestDelete = this.handleRequestDelete.bind(this);\n        this.checkIfDynamicUsagePolicy = this.checkIfDynamicUsagePolicy.bind(this);\n        this.checkIfMonetizedAPI = this.checkIfMonetizedAPI.bind(this);\n    }\n\n    /**\n     *\n     *\n     * @memberof SubscriptionTableData\n     */\n    handleRequestClose() {\n        this.setState({ openMenu: false });\n    }\n\n    /**\n    *\n    *\n    * @memberof SubscriptionTableData\n    */\n    handleRequestOpen() {\n        this.setState({ openMenu: true });\n    }\n\n    /**\n     *\n     * Handle onclick for subscription delete\n     * @param {*} subscriptionId subscription id\n     * @memberof SubscriptionTableData\n     */\n    handleRequestDelete(subscriptionId) {\n        const { handleSubscriptionDelete } = this.props;\n        this.setState({ openMenu: false });\n        if (handleSubscriptionDelete) {\n            handleSubscriptionDelete(subscriptionId);\n        }\n    }\n\n    /**\n     * Check if the API is monetized\n     * @param apiUUID API UUID\n     */\n    checkIfMonetizedAPI(apiUUID) {\n        const apiClient = new Api();\n        const promisedApi = apiClient.getAPIById(apiUUID);\n        promisedApi.then((response) => {\n            if (response && response.data) {\n                const apiData = JSON.parse(response.data);\n                this.setState({ isMonetizedAPI: apiData.monetization.enabled });\n            }\n        });\n    }\n\n    /**\n     * Check if the policy is dynamic usage type\n     * @param subscriptionUUID subscription UUID\n     */\n    checkIfDynamicUsagePolicy(subscriptionUUID) {\n        const client = new Subscription();\n        const promisedSubscription = client.getSubscription(subscriptionUUID);\n        promisedSubscription.then((response) => {\n            if (response && response.body) {\n                const subscriptionData = JSON.parse(response.data);\n                if (subscriptionData.throttlingPolicy) {\n                    const apiClient = new Api();\n                    const promisedPolicy = apiClient.getTierByName(subscriptionData.throttlingPolicy, 'subscription');\n                    promisedPolicy.then((policyResponse) => {\n                        const policyData = JSON.parse(policyResponse.data);\n                        if (policyData.monetizationAttributes.billingType && (policyData.monetizationAttributes.billingType === 'DYNAMICRATE')) {\n                            this.setState({ isDynamicUsagePolicy: true });\n                        }\n                    });\n                }\n            }\n        });\n    }\n\n    componentDidMount() {\n        this.checkIfMonetizedAPI(this.props.subscription.apiId);\n        this.checkIfDynamicUsagePolicy(this.props.subscription.subscriptionId);\n    }\n\n    /**\n    * @inheritdoc\n    * @memberof SubscriptionTableData\n    */\n    render() {\n        const {\n            subscription: {\n                apiInfo, status, throttlingPolicy, subscriptionId, apiId,\n            },\n        } = this.props;\n        const { openMenu, isMonetizedAPI, isDynamicUsagePolicy } = this.state;\n        const link = <Link to={'/apis/' + apiId}>{apiInfo.name + ' - ' + apiInfo.version}</Link>;\n\n        return (\n            <TableRow hover>\n                <TableCell style={{ paddingLeft: 0 }}>\n                    { link }\n                </TableCell>\n                <TableCell>{apiInfo.lifeCycleStatus}</TableCell>\n                <TableCell>{throttlingPolicy}</TableCell>\n                <TableCell>{status}</TableCell>\n\n                <TableCell>\n                    <div>\n                        <ScopeValidation\n                            resourcePath={resourcePaths.SINGLE_SUBSCRIPTION}\n                            resourceMethod={resourceMethods.DELETE}\n                        >\n                            <IconButton aria-label='Delete' onClick={this.handleRequestOpen}>\n                                <Icon>delete</Icon>\n                            </IconButton>\n                        </ScopeValidation>\n\n                        <Dialog open={openMenu} transition={Slide}>\n                            <DialogTitle>Confirm</DialogTitle>\n                            <DialogContent>\n                                <DialogContentText>\n                                    <FormattedMessage\n                                        id='Applications.Details.SubscriptionTableData.delete.subscription.confirmation'\n                                        defaultMessage='Are you sure you want to delete the Subscription?'\n                                    />\n                                </DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                                <Button dense color='primary' onClick={this.handleRequestClose}>\n                                    <FormattedMessage\n                                        id='Applications.Details.SubscriptionTableData.cancel'\n                                        defaultMessage='Cancel'\n                                    />\n                                </Button>\n                                <Button dense color='primary' onClick={() => this.handleRequestDelete(subscriptionId)}>\n                                    <FormattedMessage\n                                        id='Applications.Details.SubscriptionTableData.delete'\n                                        defaultMessage='Delete'\n                                    />\n                                </Button>\n                            </DialogActions>\n                        </Dialog>\n                    </div>\n                </TableCell>\n                <TableCell>\n                    <Invoice subscriptionId={subscriptionId} isMonetizedAPI={isMonetizedAPI} isDynamicUsagePolicy={isDynamicUsagePolicy} />\n                </TableCell>\n            </TableRow>\n        );\n    }\n}\nSubscriptionTableData.propTypes = {\n    subscription: PropTypes.shape({\n        apiInfo: PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            version: PropTypes.string.isRequired,\n            lifeCycleStatus: PropTypes.string.isRequired,\n        }).isRequired,\n        throttlingPolicy: PropTypes.string.isRequired,\n        subscriptionId: PropTypes.string.isRequired,\n        apiId: PropTypes.string.isRequired,\n        status: PropTypes.string.isRequired,\n    }).isRequired,\n    handleSubscriptionDelete: PropTypes.func.isRequired,\n};\nexport default SubscriptionTableData;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport Divider from '@material-ui/core/Divider';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport Box from '@material-ui/core/Box';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Progress from 'AppComponents/Shared/Progress';\nimport Alert from 'AppComponents/Shared/Alert';\nimport APIList from 'AppComponents/Apis/Listing/APICardView';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport Subscription from 'AppData/Subscription';\nimport Api from 'AppData/api';\nimport { app } from 'Settings';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport SubscriptionTableData from './SubscriptionTableData';\n\n/**\n *\n * @inheritdoc\n * @param {*} theme theme\n */\nconst styles = (theme) => ({\n    searchRoot: {\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        width: 400,\n        flex: 1,\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: 10,\n    },\n    divider: {\n        height: 28,\n        margin: 4,\n    },\n    root: {\n        padding: theme.spacing(3),\n    },\n    firstCell: {\n        paddingLeft: 0,\n    },\n    cardTitle: {\n        paddingLeft: theme.spacing(2),\n    },\n    cardContent: {\n        minHeight: 200,\n    },\n    titleWrapper: {\n        display: 'flex',\n        alignItems: 'center',\n        paddingBottom: theme.spacing(2),\n        '& h5': {\n            marginRight: theme.spacing(1),\n        },\n    },\n    dialogTitle: {\n        display: 'flex',\n        alignItems: 'flex-start',\n        padding: theme.spacing(1),\n    },\n    genericMessageWrapper: {\n        margin: theme.spacing(2),\n    },\n    searchWrapper: {\n        flex: 1,\n    },\n    searchResults: {\n        height: 30,\n        display: 'flex',\n        paddingTop: theme.spacing(1),\n        paddingRight: 0,\n        paddingBottom: 0,\n        paddingLeft: theme.spacing(2),\n    },\n    clearSearchIcon: {\n        cursor: 'pointer',\n    }\n});\n/**\n *\n *\n * @class Subscriptions\n * @extends {React.Component}\n */\nclass Subscriptions extends React.Component {\n    /**\n     *Creates an instance of Subscriptions.\n     * @param {*} props properties\n     * @memberof Subscriptions\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            subscriptions: null,\n            unsubscribedAPIList: [],\n            apisNotFound: false,\n            subscriptionsNotFound: false,\n            isAuthorize: true,\n            openDialog: false,\n            searchText: '',\n        };\n        this.handleSubscriptionDelete = this.handleSubscriptionDelete.bind(this);\n        this.updateSubscriptions = this.updateSubscriptions.bind(this);\n        this.handleSubscribe = this.handleSubscribe.bind(this);\n        this.handleOpenDialog = this.handleOpenDialog.bind(this);\n        this.handleSearchTextChange = this.handleSearchTextChange.bind(this);\n        this.handleSearchTextTmpChange = this.handleSearchTextTmpChange.bind(this);\n        this.handleClearSearch = this.handleClearSearch.bind(this);\n        this.handleEnterPress = this.handleEnterPress.bind(this);\n        this.searchTextTmp = '';\n    }\n\n    /**\n     *\n     *\n     * @memberof Subscriptions\n     */\n    componentDidMount() {\n        const {\n            match: {\n                params: { applicationId },\n            },\n        } = this.props;\n        this.updateSubscriptions(applicationId);\n    }\n\n    handleOpenDialog() {\n        this.setState((prevState) => ({ openDialog: !prevState.openDialog }));\n    }\n\n    /**\n     *\n     * Update subscriptions list of Application\n     * @param {*} applicationId application id\n     * @memberof Subscriptions\n     */\n    updateSubscriptions(applicationId) {\n        const client = new Subscription();\n        const subscriptionLimit = app.subscriptionLimit || 1000;\n        const promisedSubscriptions = client.getSubscriptions(null, applicationId, subscriptionLimit);\n        promisedSubscriptions\n            .then((response) => {\n                this.setState({ subscriptions: response.body.list });\n            })\n            .catch((error) => {\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ subscriptionsNotFound: true });\n                } else if (status === 401) {\n                    this.setState({ isAuthorize: false });\n                }\n            });\n    }\n\n    /**\n     *\n     * Handle subscription deletion of application\n     * @param {*} subscriptionId subscription id\n     * @memberof Subscriptions\n     */\n    handleSubscriptionDelete(subscriptionId) {\n        const client = new Subscription();\n        const promisedDelete = client.deleteSubscription(subscriptionId);\n\n        promisedDelete\n            .then((response) => {\n                if (response.status !== 200) {\n                    console.log(response);\n                    Alert.info('Something went wrong while deleting the Subscription!');\n                    return;\n                }\n                Alert.info('Subscription deleted successfully!');\n                const { subscriptions } = this.state;\n                for (const endpointIndex in subscriptions) {\n                    if (\n                        Object.prototype.hasOwnProperty.call(subscriptions, endpointIndex)\n                        && subscriptions[endpointIndex].subscriptionId === subscriptionId\n                    ) {\n                        subscriptions.splice(endpointIndex, 1);\n                        break;\n                    }\n                }\n                this.setState({ subscriptions });\n            })\n            .catch((error) => {\n                const { status } = error;\n                if (status === 401) {\n                    this.setState({ isAuthorize: false });\n                }\n                Alert.error('Error occurred when deleting subscription');\n            });\n    }\n\n    /**\n     * Handle onClick of subscribing to an API\n     * @param {*} applicationId application id\n     * @param {*} apiId api id\n     * @param {*} policy policy\n     * @memberof Subscriptions\n     */\n    handleSubscribe(applicationId, apiId, policy) {\n        const api = new Api();\n        const { intl } = this.props;\n        if (!policy) {\n            Alert.error(intl.formatMessage({\n                id: 'Applications.Details.Subscriptions.select.a.subscription.policy',\n                defaultMessage: 'Select a subscription policy',\n            }));\n            return;\n        }\n\n        const promisedSubscribe = api.subscribe(apiId, applicationId, policy);\n        promisedSubscribe\n            .then((response) => {\n                if (response.status !== 201) {\n                    Alert.error(intl.formatMessage({\n                        id: 'Applications.Details.Subscriptions.error.occurred.during.subscription.not.201',\n                        defaultMessage: 'Error occurred during subscription',\n                    }));\n                } else {\n                    if (response.body.status === 'ON_HOLD') {\n                        Alert.info(intl.formatMessage({\n                            defaultMessage: 'Your subscription request has been submitted and is now awaiting '\n                                + 'approval.',\n                            id: 'subscription.pending',\n                        }));\n                    } else {\n                        Alert.info(intl.formatMessage({\n                            id: 'Applications.Details.Subscriptions.subscription.successful',\n                            defaultMessage: 'Subscription successful',\n                        }));\n                    }\n                    this.updateSubscriptions(applicationId);\n                }\n            })\n            .catch((error) => {\n                const { status } = error;\n                if (status === 401) {\n                    this.setState({ isAuthorize: false });\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Applications.Details.Subscriptions.error.occurred.during.subscription',\n                    defaultMessage: 'Error occurred during subscription',\n                }));\n            });\n    }\n    handleSearchTextChange() {\n        this.setState({ searchText: this.searchTextTmp });\n    };\n    handleSearchTextTmpChange(event) {\n        this.searchTextTmp = event.target.value;\n    };\n    handleClearSearch() {\n        this.setState({ searchText: '' });\n    };\n    handleEnterPress(e) {\n        if (e.keyCode === 13) {\n            e.preventDefault();\n            this.handleSearchTextChange();\n        }\n    }\n    /**\n     * @inheritdoc\n     * @memberof Subscriptions\n     */\n    render() {\n        const { isAuthorize, openDialog, searchText } = this.state;\n\n        if (!isAuthorize) {\n            window.location = app.context + '/services/configs';\n        }\n\n        const {\n            subscriptions, apisNotFound, subscriptionsNotFound,\n        } = this.state;\n        const {\n            match: {\n                params: { applicationId },\n            },\n        } = this.props;\n        const { classes, intl } = this.props;\n\n        if (subscriptions) {\n            return (\n                <div className={classes.root}>\n                    <div className={classes.titleWrapper}>\n                        <Typography variant='h5' className={classes.keyTitle}>\n                            <FormattedMessage\n                                id='Applications.Details.Subscriptions.subscription.management'\n                                defaultMessage='Subscription Management'\n                            />\n                        </Typography>\n                        <Button\n                            color='secondary'\n                            className={classes.buttonElm}\n                            size='small'\n                            onClick={this.handleOpenDialog}\n                        >\n                            <Icon>add_circle_outline</Icon>\n                            <FormattedMessage\n                                id='Applications.Details.Subscriptions.subscription.management.add'\n                                defaultMessage='Subscribe APIs'\n                            />\n                        </Button>\n                    </div>\n                    <Grid container className='tab-grid' spacing={2}>\n                        <Grid item xs={12} xl={11}>\n                            {(subscriptions && subscriptions.length === 0)\n                                ? (\n                                    <div className={classes.genericMessageWrapper}>\n                                        <InlineMessage type='info' className={classes.dialogContainer}>\n                                            <Typography variant='h5' component='h3'>\n                                                <FormattedMessage\n                                                    id='Applications.Details.Subscriptions.no.subscriptions'\n                                                    defaultMessage='No Subscriptions Available'\n                                                />\n                                            </Typography>\n                                            <Typography component='p'>\n                                                <FormattedMessage\n                                                    id='Applications.Details.Subscriptions.no.subscriptions.content'\n                                                    defaultMessage='No subscriptions are available for this Application'\n                                                />\n                                            </Typography>\n                                        </InlineMessage>\n                                    </div>\n                                )\n                                : (\n                                    <Card className={classes.card}>\n                                        <CardActions>\n                                            <Typography variant='h6' gutterBottom className={classes.cardTitle}>\n                                                <FormattedMessage\n                                                    id='Applications.Details.Subscriptions.subscriptions'\n                                                    defaultMessage='Subscriptions'\n                                                />\n                                            </Typography>\n                                        </CardActions>\n                                        <Divider />\n                                        <CardContent className={classes.cardContent}>\n                                            {subscriptionsNotFound ? (\n                                                <ResourceNotFound />\n                                            ) : (\n                                                    <Table>\n                                                        <TableHead>\n                                                            <TableRow>\n                                                                <TableCell className={classes.firstCell}>\n                                                                    <FormattedMessage\n                                                                        id='Applications.Details.Subscriptions.api.name'\n                                                                        defaultMessage='API'\n                                                                    />\n                                                                </TableCell>\n                                                                <TableCell>\n                                                                    <FormattedMessage\n                                                                        id={`Applications.Details.Subscriptions\n                                                                        .subscription.state`}\n                                                                        defaultMessage='Lifecycle State'\n                                                                    />\n                                                                </TableCell>\n                                                                <TableCell>\n                                                                    <FormattedMessage\n                                                                        id={`Applications.Details.Subscriptions\n                                                                        .subscription.tier`}\n                                                                        defaultMessage='Subscription Tier'\n                                                                    />\n                                                                </TableCell>\n                                                                <TableCell>\n                                                                    <FormattedMessage\n                                                                        id='Applications.Details.Subscriptions.Status'\n                                                                        defaultMessage='Subscription Status'\n                                                                    />\n                                                                </TableCell>\n                                                                <TableCell>\n                                                                    <FormattedMessage\n                                                                        id='Applications.Details.Subscriptions.action'\n                                                                        defaultMessage='Action'\n                                                                    />\n                                                                </TableCell>\n                                                                <TableCell>\n                                                                    <FormattedMessage\n                                                                        id='Applications.Details.Subscriptions.invoice'\n                                                                        defaultMessage='Invoice'\n                                                                    />\n                                                                </TableCell>\n                                                            </TableRow>\n                                                        </TableHead>\n                                                        <TableBody>\n                                                            {subscriptions\n                                                                && subscriptions.map((subscription) => {\n                                                                    return (\n                                                                        <SubscriptionTableData\n                                                                            key={subscription.subscriptionId}\n                                                                            subscription={subscription}\n                                                                            handleSubscriptionDelete={this.handleSubscriptionDelete}\n                                                                        />\n                                                                    );\n                                                                })}\n                                                        </TableBody>\n                                                    </Table>\n                                                )}\n                                        </CardContent>\n                                    </Card>\n                                )}\n                        </Grid>\n                    </Grid>\n                    <Dialog\n                        onClose={this.handleOpenDialog}\n                        aria-labelledby='simple-dialog-title'\n                        open={openDialog}\n                        maxWidth='lg'\n                        fullWidth\n                        fullScreen\n                    >\n                        <MuiDialogTitle disableTypography className={classes.dialogTitle}>\n                            <Typography variant='h6'>\n                                <FormattedMessage\n                                    id='Applications.Details.Subscriptions.subscription.management.add'\n                                    defaultMessage='Subscribe APIs'\n                                />\n                            </Typography>\n                            <Box className={classes.searchWrapper}>\n                                <Paper component=\"form\" className={classes.searchRoot}>\n                                    {searchText && <HighlightOffIcon className={classes.clearSearchIcon}\n                                        onClick={this.handleClearSearch}\n                                    />}\n                                    <InputBase\n                                        className={classes.input}\n                                        placeholder={intl.formatMessage({ defaultMessage: 'Search APIs', id: 'Applications.Details.Subscriptions.search' })}\n                                        inputProps={{ 'aria-label': intl.formatMessage({ defaultMessage: 'Search APIs', id: 'Applications.Details.Subscriptions.search' }) }}\n                                        onChange={this.handleSearchTextTmpChange}\n                                        onKeyDown={this.handleEnterPress}\n                                    />\n                                    <IconButton className={classes.iconButton} aria-label=\"search\" onClick={this.handleSearchTextChange}>\n                                        <SearchIcon />\n                                    </IconButton>\n                                </Paper>\n                                <Box className={classes.searchResults}>\n                                    {(searchText && searchText !== '') ? <>\n                                        <Typography variant='caption'>\n                                            <FormattedMessage\n                                                id='Applications.Details.Subscriptions.filter.msg'\n                                                defaultMessage='Filtered APIs for '\n                                            />{searchText}</Typography>\n                                    </> : (<Typography variant='caption'>\n                                        <FormattedMessage\n                                            id='Applications.Details.Subscriptions.filter.msg.all.apis'\n                                            defaultMessage='Displaying all APIs'\n                                        /></Typography>)}\n                                </Box>\n\n                            </Box>\n\n                            <IconButton aria-label='close' className={classes.closeButton} onClick={this.handleOpenDialog}>\n                                <Icon>cancel</Icon>\n                            </IconButton>\n                        </MuiDialogTitle>\n                        <Box padding={2}>\n                            <APIList\n                                apisNotFound={apisNotFound}\n                                subscriptions={subscriptions}\n                                applicationId={applicationId}\n                                handleSubscribe={(app, api, policy) => this.handleSubscribe(app, api, policy)}\n                                searchText={searchText}\n                            />\n                        </Box>\n                    </Dialog>\n                </div>\n            );\n        } else {\n            return (\n              <Progress />  \n            );\n        }\n    }\n}\nSubscriptions.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    match: PropTypes.shape({\n        params: PropTypes.shape({\n            applicationId: PropTypes.string,\n        }).isRequired,\n    }).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(Subscriptions));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Collapse from '@material-ui/core/Collapse';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport VerticalDivider from 'AppComponents/Shared/VerticalDivider';\nimport Grid from '@material-ui/core/Grid';\nimport API from 'AppData/api';\nimport Application from 'AppData/Application';\nimport Alert from 'AppComponents/Shared/Alert';\nimport DeleteConfirmation from '../Listing/DeleteConfirmation';\nimport AuthManager from 'AppData/AuthManager';\n\n/**\n * @param {*} theme theme details\n * @returns {Object}\n */\nconst styles = (theme) => {\n    const mainBack = theme.custom.infoBar.background || '#ffffff';\n    const infoBarHeight = theme.custom.infoBar.height || 70;\n    const starColor = theme.custom.infoBar.starColor || theme.palette.getContrastText(mainBack);\n\n    return {\n        root: {\n            height: infoBarHeight,\n            background: mainBack,\n            color: theme.palette.getContrastText(mainBack),\n            borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n            display: 'flex',\n            alignItems: 'center',\n            paddingLeft: theme.spacing(2),\n        },\n        backIcon: {\n            color: theme.palette.primary.main,\n            fontSize: 56,\n            cursor: 'pointer',\n        },\n        backText: {\n            color: theme.palette.primary.main,\n            cursor: 'pointer',\n            fontFamily: theme.typography.fontFamily,\n        },\n        starRate: {\n            fontSize: 40,\n            color: starColor,\n        },\n        starRateMy: {\n            fontSize: 70,\n            color: theme.palette.primary.main,\n        },\n        rateLink: {\n            cursor: 'pointer',\n            lineHeight: '70px',\n        },\n        topBar: {\n            display: 'flex',\n            paddingBottom: theme.spacing(2),\n        },\n        infoContent: {\n            color: theme.palette.getContrastText(mainBack),\n            background: mainBack,\n            padding: theme.spacing(3),\n            '& td, & th': {\n                color: theme.palette.getContrastText(mainBack),\n            },\n        },\n        infoContentBottom: {\n            background: theme.custom.infoBar.sliderBackground,\n            color: theme.palette.getContrastText(theme.custom.infoBar.sliderBackground),\n            borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n        },\n        bootstrapRoot: {\n            padding: 0,\n            'label + &': {\n                marginTop: theme.spacing(3),\n            },\n        },\n        bootstrapInput: {\n            borderRadius: 4,\n            backgroundColor: theme.palette.common.white,\n            border: '1px solid #ced4da',\n            padding: '5px 12px',\n            width: 350,\n            transition: theme.transitions.create(['border-color', 'box-shadow']),\n            fontFamily: [\n                '-apple-system',\n                'BlinkMacSystemFont',\n                '\"Segoe UI\"',\n                'Roboto',\n                '\"Helvetica Neue\"',\n                'Arial',\n                'sans-serif',\n                '\"Apple Color Emoji\"',\n                '\"Segoe UI Emoji\"',\n                '\"Segoe UI Symbol\"',\n            ].join(','),\n            '&:focus': {\n                borderColor: '#80bdff',\n                boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n            },\n        },\n        epWrapper: {\n            display: 'flex',\n        },\n        prodLabel: {\n            lineHeight: '30px',\n            marginRight: 10,\n            width: 100,\n        },\n        contentWrapper: {\n            maxWidth: theme.custom.contentAreaWidth - theme.custom.leftMenu.width,\n            alignItems: 'center',\n        },\n        ratingBoxWrapper: {\n            position: 'relative',\n            display: 'flex',\n            alignItems: 'center',\n        },\n        ratingBox: {\n            backgroundColor: theme.custom.leftMenu.background,\n            border: '1px solid rgb(71, 211, 244)',\n            borderRadius: '5px',\n            display: 'flex',\n            position: 'absolute',\n            top: 14,\n            height: '40px',\n            color: theme.palette.getContrastText(theme.custom.leftMenu.background),\n            alignItems: 'center',\n            left: '0',\n            paddingLeft: '5px',\n            paddingRight: '5px',\n        },\n        userRating: {\n            display: 'flex',\n            alignItems: 'flex-end',\n        },\n        verticalDividerStar: {\n            borderLeft: 'solid 1px ' + theme.palette.grey.A200,\n            height: 40,\n            marginRight: theme.spacing(1),\n            marginLeft: theme.spacing(1),\n        },\n        backLink: {\n            alignItems: 'center',\n            textDecoration: 'none',\n            display: 'flex',\n        },\n        ratingSummery: {\n            alignItems: 'center',\n            flexDirection: 'column',\n            display: 'flex',\n        },\n        infoBarMain: {\n            width: '100%',\n        },\n        buttonView: {\n            textAlign: 'left',\n            justifyContent: 'left',\n            display: 'flex',\n            paddingLeft: theme.spacing(2),\n            cursor: 'pointer',\n        },\n        buttonOverviewText: {\n            display: 'inline-block',\n            paddingTop: 3,\n        },\n        button: {\n            display: 'inline-grid',\n            cursor: 'pointer',\n        },\n        editButton: {\n            display: 'inline-grid',\n            cursor: 'pointer',\n        },\n        iconButton: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            flexDirection: 'column',\n        },\n        appNameXSmall: {\n            whiteSpace: 'nowrap',\n            overflowX: 'auto',\n            overflowY: 'hidden',\n            maxWidth: 200,\n            lineHeight: 1.3,\n        },\n        appNameSmall: {\n            whiteSpace: 'nowrap',\n            overflowX: 'auto',\n            overflowY: 'hidden',\n            maxWidth: 310,\n            lineHeight: 1.3,\n        },\n        appNameMid: {\n            whiteSpace: 'nowrap',\n            overflowX: 'auto',\n            overflowY: 'hidden',\n            maxWidth: 640,\n            lineHeight: 1.3,\n        },\n        appNameBig: {\n            whiteSpace: 'nowrap',\n            overflowX: 'auto',\n            overflowY: 'hidden',\n            maxWidth: 980,\n            lineHeight: 1.3,\n        },\n        linkTitle: {\n            color: theme.palette.getContrastText(theme.custom.infoBar.background),\n        },\n    };\n};\n/**\n *\n *\n * @class InfoBar\n * @extends {React.Component}\n */\nclass InfoBar extends React.Component {\n    /**\n     * @param {Object} props props passed from above\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            notFound: false,\n            showOverview: true,\n            isDeleteOpen: false,\n            applicationOwner: '',\n        };\n        this.toggleOverview = this.toggleOverview.bind(this);\n        this.handleAppDelete = this.handleAppDelete.bind(this);\n        this.handleDeleteConfimation = this.handleDeleteConfimation.bind(this);\n        this.toggleDeleteConfirmation = this.toggleDeleteConfirmation.bind(this);\n    }\n\n    /**\n     * @memberof InfoBar\n     */\n    componentDidMount() {\n        const client = new API();\n        const { applicationId } = this.props;\n        // Get application\n        const promisedApplication = client.getApplication(applicationId);\n\n        promisedApplication\n            .then((response) => {\n                this.setState({ applicationOwner: response.obj.owner });\n                const promisedPolicy = client.getTierByName(response.obj.throttlingPolicy, 'application');\n                return Promise.all([response, promisedPolicy]);\n            })\n            .then((response) => {\n                const [application, tier] = response.map(data => data.obj);\n                this.setState({ application, tierDescription: tier.description });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    }\n\n    /**\n     * Toggles the showOverview state\n     * @param {boolean} todo toggle state\n     * @memberof InfoBar\n     */\n    toggleOverview(todo) {\n        if (typeof todo === 'boolean') {\n            this.setState({ showOverview: todo });\n        } else {\n            this.setState(prevState => ({ showOverview: !prevState.showOverview }));\n        }\n    }\n\n    /**\n     * Handles delete confimation\n     * @memberof InfoBar\n     */\n    handleDeleteConfimation() {\n        const { isDeleteOpen } = this.state;\n        this.setState({ isDeleteOpen: !isDeleteOpen });\n    }\n\n    /**\n     * Handles application deletion\n     * @memberof InfoBar\n     */\n    handleAppDelete() {\n        const { applicationId, intl } = this.props;\n        const { application } = this.state;\n        const promisedDelete = Application.deleteApp(applicationId);\n        let message = intl.formatMessage({\n            defaultMessage: 'Application {name} deleted successfully!',\n            id: 'Applications.Details.InfoBar.application.deleted.successfully',\n        }, {name: application.name});\n        promisedDelete.then((ok) => {\n            if (ok) {\n                Alert.info(message);\n                this.toggleDeleteConfirmation();\n            }\n            this.props.history.push('/applications');\n        }).catch((error) => {\n            console.log(error);\n            message = intl.formatMessage({\n                defaultMessage: 'Error while deleting application {name}',\n                id: 'Applications.Details.InfoBar.application.deleting.error',\n            }, {name: application.name});\n            Alert.error(message);\n        });\n    }\n\n    toggleDeleteConfirmation = () => {\n        this.setState(({ isDeleteOpen }) => ({ isDeleteOpen: !isDeleteOpen }));\n    }\n\n\n    /**\n     * @returns {div}\n     * @memberof InfoBar\n     */\n    render() {\n        const {\n            classes, theme, applicationId,\n        } = this.props;\n        const {\n            application, tierDescription, showOverview, notFound, isDeleteOpen, applicationOwner,\n        } = this.state;\n        const {\n            custom: {\n                leftMenu: { position },\n            },\n        } = theme;\n\n        if (notFound) {\n            return (\n              <ResourceNotFound\n                message={\n                  <FormattedMessage\n                    id=\"Applications.Details.InfoBar.listing.resource.not.found\"\n                    defaultMessage=\"Resource Not Fount\"\n                  />\n                }\n              />\n            );\n        }\n\n        if (!application) {\n            return <Loading />;\n        }\n        const isUserOwner = AuthManager.getUser().name === applicationOwner;\n\n        return (\n            <div className={classes.infoBarMain}>\n                <div className={classes.root}>\n                    <Grid item xs={10}>\n                        <div style={{ marginLeft: theme.spacing(1) }}>\n                            <Link to={'/applications/' + applicationId + '/overview'} className={classes.linkTitle}>\n                                <Typography variant='h4'>{application.name}</Typography>\n                            </Link>\n                        </div>\n                        <div style={{ marginLeft: theme.spacing(1) }}>\n                            <Typography variant='caption' gutterBottom align='left'>\n                                {application.subscriptionCount}{' '}\n                                <FormattedMessage\n                                    id='Applications.Details.InfoBar.subscriptions'\n                                    defaultMessage='Subscriptions'\n                                />\n                            </Typography>\n                        </div>\n                    </Grid>\n                    <VerticalDivider height={70} />\n                    <Grid item xs={1} m={1} className={classes.editButton}>\n                        {isUserOwner ? (\n                            <Link to={`/applications/${applicationId}/edit/`} className={classes.editButton}>\n                                <Button\n                                    style={{ padding: '4px' }}\n                                    color='default'\n                                    classes={{ label: classes.iconButton }}\n                                    aria-label={(\n                                        <FormattedMessage\n                                            id='Applications.Details.InfoBar.edit'\n                                            defaultMessage='Edit'\n                                        />\n                                    )}\n                                >\n                                    <Icon>edit</Icon>\n                                    <Typography variant='caption' style={{ marginTop: '2px' }} >\n                                        <FormattedMessage\n                                            id='Applications.Details.InfoBar.edit.text'\n                                            defaultMessage='Edit'\n                                        />\n                                    </Typography>\n                                </Button>\n                            </Link>) :\n                            (\n                                <Button\n                                    disabled\n                                    style={{ padding: '4px' }}\n                                    color='default'\n                                    classes={{ label: classes.iconButton }}\n                                    aria-label={(\n                                        <FormattedMessage\n                                            id='Applications.Details.InfoBar.edit'\n                                            defaultMessage='Edit'\n                                        />\n                                    )}\n                                >\n                                    <Icon>edit</Icon>\n                                    <Typography variant='caption' style={{ marginTop: '2px' }} >\n                                        <FormattedMessage\n                                            id='Applications.Details.InfoBar.edit.text'\n                                            defaultMessage='Edit'\n                                        />\n                                    </Typography>\n                                </Button>\n                            )}\n                    </Grid>\n                    <VerticalDivider height={70} />\n                    <Grid item xs={1} m={1} className={classes.button}>\n                        <Button\n                            onClick={this.handleDeleteConfimation}\n                            disabled={AuthManager.getUser().name !== applicationOwner}\n                            color='default'\n                            classes={{ label: classes.iconButton }}\n                            aria-label={(\n                                <FormattedMessage\n                                    id='Applications.Details.InfoBar.delete'\n                                    defaultMessage='Delete'\n                                />\n                            )}\n                        >\n                            <Icon>delete</Icon>\n                            <Typography variant='caption' style={{ marginTop: '2px' }} >\n                                <FormattedMessage\n                                    id='Applications.Details.InfoBar.text'\n                                    defaultMessage='Delete'\n                                />\n                            </Typography>\n                        </Button>\n                        <DeleteConfirmation\n                            handleAppDelete={this.handleAppDelete}\n                            isDeleteOpen={isDeleteOpen}\n                            toggleDeleteConfirmation={this.toggleDeleteConfirmation}\n                        />\n                    </Grid>\n                </div>\n            </div>\n        );\n    }\n}\nInfoBar.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    applicationId: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(withRouter(withStyles(styles, { withTheme: true })(InfoBar)));\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Icon from '@material-ui/core/Icon';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport { Link } from 'react-router-dom';\nimport Divider from '@material-ui/core/Divider';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport { app } from 'Settings';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport API from 'AppData/api';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport Application from 'AppData/Application';\nimport TokenManager from 'AppComponents/Shared/AppsAndKeys/TokenManager';\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: theme.spacing(3, 2),\n    },\n    table: {\n        minWidth: '100%',\n    },\n    leftCol: {\n        width: 200,\n    },\n    iconAligner: {\n        display: 'flex',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n    },\n    iconTextWrapper: {\n        display: 'inline-block',\n        paddingLeft: 20,\n    },\n    iconEven: {\n        color: theme.custom.infoBar.iconEvenColor,\n        width: theme.spacing(3),\n    },\n    iconOdd: {\n        color: theme.custom.infoBar.iconOddColor,\n        width: theme.spacing(3),\n    },\n    noKeysRoot: {\n        backgroundImage: `url(${app.context + theme.custom.overviewPage.keysBackground})`,\n        height: '100%',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        minHeight: 192,\n        display: 'flex',\n        alignItems: 'center',\n    },\n    heading: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        paddingLeft: theme.spacing(1),\n    },\n    emptyBox: {\n        background: '#ffffff55',\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        border: 'solid 1px #fff',\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n    summaryRoot: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    actionPanel: {\n        justifyContent: 'flex-start',\n    },\n}));\n\n/**\n * Render application overview page.\n * @param {JSON} props Props passed down from parent.\n * @returns {JSX} jsx output from render.\n */\nfunction Overview(props) {\n    const classes = useStyles();\n    const [application, setApplication] = useState(null);\n    const [tierDescription, setTierDescription] = useState(null);\n    const [notFound, setNotFound] = useState(false);\n    const { match: { params: { applicationId } } } = props;\n    useEffect(() => {\n        const client = new API();\n        // Get application\n        const promisedApplication = client.getApplication(applicationId);\n        promisedApplication\n            .then((response) => {\n                const promisedTier = client.getTierByName(response.obj.throttlingPolicy, 'application');\n                const app = response.obj;\n                promisedTier.then((tierResponse) => {\n                    setTierDescription(tierResponse.obj.description);\n                    setApplication(app);\n                });\n            }).catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                } else {\n                    setNotFound(false);\n                }\n            });\n    }, []);\n    if (notFound) {\n        return <ResourceNotFound />;\n    }\n    if (!application) {\n        return <Loading />;\n    }\n    const pathPrefix = '/applications/' + applicationId;\n    return (\n        <>\n            <Paper className={classes.root}>\n                <Table className={classes.table}>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <div className={classes.iconAligner}>\n                                    <Icon className={classes.iconEven}>description</Icon>\n                                    <span className={classes.iconTextWrapper}>\n                                        <Typography variant='caption' gutterBottom align='left'>\n                                            <FormattedMessage\n                                                id='Applications.Details.Overview.description'\n                                                defaultMessage='Description'\n                                            />\n                                        </Typography>\n                                    </span>\n                                </div>\n                            </TableCell>\n                            <TableCell>\n                                {application.description}\n                            </TableCell>\n                        </TableRow>\n                        {tierDescription\n                            && (\n                                <TableRow>\n                                    <TableCell component='th' scope='row' className={classes.leftCol}>\n                                        <div className={classes.iconAligner}>\n                                            <Icon className={classes.iconOdd}>settings_input_component</Icon>\n                                            <span className={classes.iconTextWrapper}>\n                                                <Typography variant='caption' gutterBottom align='left'>\n                                                    <FormattedMessage\n                                                        id='Applications.Details.InfoBar.throttling.tier'\n                                                        defaultMessage='Throttling Tier'\n                                                    />\n                                                </Typography>\n                                            </span>\n                                        </div>\n                                    </TableCell>\n                                    {application\n                                        && (\n                                            <TableCell>\n                                                {application.throttlingPolicy}\n                                                {' '}\n                                                {`(${tierDescription})`}\n                                            </TableCell>\n                                        )}\n                                </TableRow>\n                            )}\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <div className={classes.iconAligner}>\n                                    <Icon className={classes.iconEven}>vpn_key</Icon>\n                                    <span className={classes.iconTextWrapper}>\n                                        <Typography variant='caption' gutterBottom align='left'>\n                                            <FormattedMessage\n                                                id='Applications.Details.Overview.token.type'\n                                                defaultMessage='Token Type'\n                                            />\n                                        </Typography>\n                                    </span>\n                                </div>\n                            </TableCell>\n                            <TableCell>\n                                {Application.TOKEN_TYPES[application.tokenType].displayName}\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <div className={classes.iconAligner}>\n                                    <Icon className={classes.iconOdd}>assignment_turned_in</Icon>\n                                    <span className={classes.iconTextWrapper}>\n                                        <Typography variant='caption' gutterBottom align='left'>\n                                            <FormattedMessage\n                                                id='Applications.Details.Overview.workflow.status'\n                                                defaultMessage='Workflow Status'\n                                            />\n                                        </Typography>\n                                    </span>\n                                </div>\n                            </TableCell>\n                            <TableCell>\n                                {application.status}\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <div className={classes.iconAligner}>\n                                    <Icon className={classes.iconEven}>account_box</Icon>\n                                    <span className={classes.iconTextWrapper}>\n                                        <Typography variant='caption' gutterBottom align='left'>\n                                            <FormattedMessage\n                                                id='Applications.Details.Overview.application.owner'\n                                                defaultMessage='Application Owner'\n                                            />\n                                        </Typography>\n                                    </span>\n                                </div>\n                            </TableCell>\n                            <TableCell>\n                                {application.owner}\n                            </TableCell>\n                        </TableRow>\n                        {application.attributes\n                            && (\n                                Object.keys(application.attributes).map((attr, index) => {\n                                    const attrValue = application.attributes[attr];\n                                    return (\n                                        <TableRow key={attr}>\n                                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                                <div className={classes.iconAligner}>\n                                                    <Icon className={classNames(\n                                                        { [classes.iconEven]: index % 2 !== 0 },\n                                                        { [classes.iconOdd]: index % 2 === 0 },\n                                                    )}\n                                                    >\n                                                        web_asset\n                                                    </Icon>\n                                                    <span className={classes.iconTextWrapper}>\n                                                        <Typography variant='caption' gutterBottom align='left'>\n                                                            {attr}\n                                                        </Typography>\n                                                    </span>\n                                                </div>\n                                            </TableCell>\n                                            <TableCell>\n                                                {attrValue}\n                                            </TableCell>\n                                        </TableRow>\n                                    );\n                                }))}\n\n                    </TableBody>\n                </Table>\n            </Paper>\n            <Grid container className={classes.root} spacing={2}>\n                <Grid item xs={12} lg={6}>\n                    <ExpansionPanel defaultExpanded>\n                        <ExpansionPanelSummary classes={{ content: classes.summaryRoot }}>\n                            <Icon className={classes.iconEven}>vpn_key</Icon>\n                            <Typography className={classes.heading} variant='h6'>\n                                <FormattedMessage\n                                    id='Applications.Details.Overview.prod.keys.title'\n                                    defaultMessage='Production Keys'\n                                />\n                            </Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails\n                            classes={{ root: classNames({ [classes.noKeysRoot]: true }) }}\n                        >\n                            <TokenManager\n                                keyType='PRODUCTION'\n                                selectedApp={{\n                                    appId: application.applicationId,\n                                    label: application.name,\n                                    tokenType: application.tokenType,\n                                    owner: application.owner,\n                                    hashEnabled: application.hashEnabled,\n                                }}\n                                summary\n                            />\n                        </ExpansionPanelDetails>\n                        <Divider />\n                        <ExpansionPanelActions className={classes.actionPanel}>\n                            <Link to={pathPrefix + '/productionkeys/oauth'} className={classes.button}>\n                                <Button size='small' color='primary'>\n                                    <FormattedMessage\n                                        id='Applications.Details.Overview.show.more'\n                                        defaultMessage='Manage >>'\n                                    />\n                                </Button>\n                            </Link>\n                        </ExpansionPanelActions>\n                    </ExpansionPanel>\n                </Grid>\n                <Grid item xs={12} lg={6}>\n                    <ExpansionPanel defaultExpanded>\n                        <ExpansionPanelSummary classes={{ content: classes.summaryRoot }}>\n                            <Icon className={classes.iconEven}>vpn_key</Icon>\n                            <Typography className={classes.heading} variant='h6'>\n                                <FormattedMessage\n                                    id='Applications.Details.Overview.sand.keys.title'\n                                    defaultMessage='Sandbox Keys'\n                                />\n                            </Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails\n                            classes={{ root: classNames({ [classes.noKeysRoot]: true }) }}\n                        >\n                            <TokenManager\n                                keyType='SANDBOX'\n                                selectedApp={{\n                                    appId: application.applicationId,\n                                    label: application.name,\n                                    tokenType: application.tokenType,\n                                    owner: application.owner,\n                                    hashEnabled: application.hashEnabled,\n                                }}\n                                summary\n                            />\n                        </ExpansionPanelDetails>\n                        <Divider />\n                        <ExpansionPanelActions className={classes.actionPanel}>\n                            <Link to={pathPrefix + '/sandboxkeys/oauth'} className={classes.button}>\n                                <Button size='small' color='primary'>\n                                    <FormattedMessage\n                                        id='Applications.Details.Overview.show.more'\n                                        defaultMessage='Manage >>'\n                                    />\n                                </Button>\n                            </Link>\n                        </ExpansionPanelActions>\n                    </ExpansionPanel>\n                </Grid>\n            </Grid>\n        </>\n    );\n}\nexport default injectIntl(Overview);\n","/* eslint-disable react/prop-types */\n/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Route, Switch, Redirect, Link,\n} from 'react-router-dom';\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\nimport API from 'AppData/api';\nimport { app } from 'Settings';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport CustomIcon from 'AppComponents/Shared/CustomIcon';\nimport LeftMenuItem from 'AppComponents/Shared/LeftMenuItem';\nimport TokenManager from 'AppComponents/Shared/AppsAndKeys/TokenManager';\nimport ApiKeyManager from 'AppComponents/Shared/AppsAndKeys/ApiKeyManager';\nimport classNames from 'classnames';\nimport Paper from '@material-ui/core/Paper';\nimport { Helmet } from 'react-helmet';\nimport Subscriptions from './Subscriptions';\nimport InfoBar from './InfoBar';\nimport Overview from './Overview';\n\n/**\n *\n *\n * @param {*} theme theme details\n * @returns {Object}\n */\nconst styles = (theme) => {\n    const {\n        custom: {\n            leftMenu: { width, position },\n        },\n    } = theme;\n    const shiftToLeft = position === 'vertical-left' ? width : 0;\n    const shiftToRight = position === 'vertical-right' ? width : 0;\n    const leftMenuPaddingLeft = position === 'horizontal' ? theme.spacing(3) : 0;\n\n    return {\n        LeftMenu: {\n            backgroundColor: theme.custom.leftMenu.background,\n            backgroundImage: `url(${app.context}${theme.custom.leftMenu.backgroundImage})`,\n            textAlign: 'left',\n            fontFamily: theme.typography.fontFamily,\n            position: 'absolute',\n            bottom: 0,\n            paddingLeft: leftMenuPaddingLeft,\n        },\n        leftMenuHorizontal: {\n            top: theme.custom.infoBar.height,\n            width: '100%',\n            overflowX: 'auto',\n            height: 60,\n            display: 'flex',\n            left: 0,\n        },\n        leftMenuVerticalLeft: {\n            width: theme.custom.leftMenu.width,\n            top: 0,\n            left: 0,\n            overflowY: 'auto',\n        },\n        leftMenuVerticalRight: {\n            width: theme.custom.leftMenu.width,\n            top: 0,\n            right: 0,\n            overflowY: 'auto',\n        },\n        leftLInkMain: {\n            borderRight: 'solid 1px ' + theme.custom.leftMenu.background,\n            cursor: 'pointer',\n            background: theme.custom.leftMenu.rootBackground,\n            color: theme.palette.getContrastText(theme.custom.leftMenu.rootBackground),\n            textDecoration: 'none',\n            alignItems: 'center',\n            justifyContent: 'center',\n            display: 'flex',\n            height: theme.custom.infoBar.height,\n            textDecoration: 'none',\n        },\n        leftLInkMainText: {\n            fontSize: 18,\n            color: theme.palette.grey[500],\n            textDecoration: 'none',\n            paddingLeft: theme.spacing(2),\n        },\n        detailsContent: {\n            display: 'flex',\n            flex: 1,\n        },\n        content: {\n            display: 'flex',\n            flex: 1,\n            flexDirection: 'column',\n            marginLeft: shiftToLeft,\n            marginRight: shiftToRight,\n            paddingBottom: theme.spacing(3),\n        },\n        contentLoader: {\n            paddingTop: theme.spacing(3),\n        },\n        contentLoaderRightMenu: {\n            paddingRight: theme.custom.leftMenu.width,\n        },\n    };\n};\n/**\n *\n *\n * @class Details\n * @extends {Component}\n */\nclass Details extends Component {\n    /**\n     *\n     * @param {Object} props props passed from above\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            application: null,\n            active: 'overview',\n        };\n    }\n\n    /**\n     *\n     *\n     * @memberof Details\n     */\n    componentDidMount() {\n        const { match } = this.props;\n        const client = new API();\n        const promisedApplication = client.getApplication(match.params.application_uuid);\n        promisedApplication\n            .then((response) => {\n                this.setState({ application: response.obj });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    }\n\n    /**\n     *\n     * @param {String} menuLink selected menu name\n     * @memberof Details\n     */\n    handleMenuSelect = (menuLink) => {\n        const { history, match } = this.props;\n        history.push({ pathname: '/applications/' + match.params.application_uuid + '/' + menuLink });\n        this.setState({ active: menuLink });\n    };\n\n    renderManager = (application, keyType, secScheme) => {\n        return (\n            <Paper>\n                {secScheme === 'oauth' && (\n                    <div>\n                        <TokenManager\n                            keyType={keyType}\n                            selectedApp={{\n                                appId: application.applicationId,\n                                label: application.name,\n                                tokenType: application.tokenType,\n                                owner: application.owner,\n                                hashEnabled: application.hashEnabled,\n                            }}\n                        />\n                    </div>\n                )}\n                {secScheme === 'apikey' && (\n                    <div>\n                        <ApiKeyManager\n                            keyType={keyType}\n                            selectedApp={{\n                                appId: application.applicationId,\n                                label: application.name,\n                                tokenType: application.tokenType,\n                                owner: application.owner,\n                            }}\n                        />\n                    </div>\n                )}\n            </Paper>\n        );\n    }\n\n    /**\n     *\n     *\n     * @returns {Component}\n     * @memberof Details\n     */\n    render() {\n        const { classes, match, theme } = this.props;\n        const { notFound, application } = this.state;\n        const pathPrefix = '/applications/' + match.params.application_uuid;\n        const redirectUrl = pathPrefix + '/overview';\n        const {\n            custom: {\n                leftMenu: {\n                    rootIconSize, rootIconTextVisible, rootIconVisible, position,\n                },\n                title: {\n                    prefix, sufix,\n                },\n            },\n        } = theme;\n        if (notFound) {\n            return <ResourceNotFound />;\n        } else if (!application) {\n            return <Loading />;\n        }\n        return (\n            <>\n                <Helmet>\n                    <title>{`${prefix} ${application.name}${sufix}`}</title>\n                </Helmet>\n                <div\n                    className={classNames(\n                        classes.LeftMenu,\n                        {\n                            [classes.leftMenuHorizontal]: position === 'horizontal',\n                        },\n                        {\n                            [classes.leftMenuVerticalLeft]: position === 'vertical-left',\n                        },\n                        {\n                            [classes.leftMenuVerticalRight]: position === 'vertical-right',\n                        },\n                        'left-menu',\n                    )}\n                >\n                    {rootIconVisible && (\n                        <Link to='/applications' className={classes.leftLInkMain}>\n                            <CustomIcon width={rootIconSize} height={rootIconSize} icon='applications' />\n                            {rootIconTextVisible && (\n                                <Typography className={classes.leftLInkMainText}>\n                                    <FormattedMessage id='Applications.Details.applications.all' defaultMessage='ALL APPs' />\n                                </Typography>\n                            )}\n                        </Link>\n                    )}\n                    <LeftMenuItem text={<FormattedMessage id='Applications.Details.menu.overview' defaultMessage='Overview' />} iconText='overview' route='overview' to={pathPrefix + '/overview'} />\n                    <LeftMenuItem text={<FormattedMessage id='Applications.Details.menu.prod.keys' defaultMessage='Production Keys' />} iconText='productionkeys' route='productionkeys' to={pathPrefix + '/productionkeys/oauth'} />\n                    <LeftMenuItem text={<FormattedMessage id='Applications.Details.menu.oauth.tokens' defaultMessage='OAuth2 Tokens' />} route='productionkeys/oauth' to={pathPrefix + '/productionkeys/oauth'} submenu />\n                    <LeftMenuItem text={<FormattedMessage id='Applications.Details.menu.api.key' defaultMessage='Api Key' />} route='productionkeys/apikey' to={pathPrefix + '/productionkeys/apikey'} submenu />\n                    <LeftMenuItem text={<FormattedMessage id='Applications.Details.menu.sandbox.keys' defaultMessage='Sandbox Keys' />} iconText='productionkeys' route='sandboxkeys' to={pathPrefix + '/sandboxkeys/oauth'} />\n                    <LeftMenuItem text={<FormattedMessage id='Applications.Details.menu.oauth.tokens' defaultMessage='OAuth2 Tokens' />} route='sandboxkeys/oauth' to={pathPrefix + '/sandboxkeys/oauth'} submenu />\n                    <LeftMenuItem text={<FormattedMessage id='Applications.Details.menu.api.key' defaultMessage='Api Key' />} route='sandboxkeys/apikey' to={pathPrefix + '/sandboxkeys/apikey'} submenu />\n                    <LeftMenuItem text={<FormattedMessage id='Applications.Details.menu.subscriptions' defaultMessage='Subscriptions' />} iconText='subscriptions' route='subscriptions' to={pathPrefix + '/subscriptions'} />\n                </div>\n                <div className={classes.content}>\n                    <InfoBar applicationId={match.params.application_uuid} innerRef={node => (this.infoBar = node)} />\n                    <div\n                        className={classNames(\n                            { [classes.contentLoader]: position === 'horizontal' },\n                            { [classes.contentLoaderRightMenu]: position === 'vertical-right' },\n                        )}\n                    >\n                        <Switch>\n                            <Redirect exact from='/applications/:applicationId' to={redirectUrl} />\n                            <Route\n                                path='/applications/:applicationId/overview'\n                                component={Overview}\n                            />\n                            <Route\n                                path='/applications/:applicationId/productionkeys/oauth'\n                                component={() => (this.renderManager(application, 'PRODUCTION', 'oauth'))}\n                            />\n                            <Route\n                                path='/applications/:applicationId/productionkeys/apikey'\n                                component={() => (this.renderManager(application, 'PRODUCTION', 'apikey'))}\n                            />\n                            <Route\n                                path='/applications/:applicationId/sandboxkeys/oauth'\n                                component={() => (this.renderManager(application, 'SANDBOX', 'oauth'))}\n                            />\n                            <Route\n                                path='/applications/:applicationId/sandboxkeys/apikey'\n                                component={() => (this.renderManager(application, 'SANDBOX', 'apikey'))}\n                            />\n                            <Route path='/applications/:applicationId/subscriptions' component={Subscriptions} />\n                            <Route component={ResourceNotFound} />\n                        </Switch>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nDetails.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    match: PropTypes.shape({\n        params: PropTypes.shape({\n            application_uuid: PropTypes.string.isRequired,\n        }).isRequired,\n    }).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.func.isRequired,\n    }).isRequired,\n};\n\nexport default withStyles(styles, { withTheme: true })(Details);\n"],"sourceRoot":""}