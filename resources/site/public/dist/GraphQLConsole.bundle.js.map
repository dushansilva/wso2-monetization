{"version":3,"sources":["webpack:///./source/src/app/components/Apis/Details/ApiConsole/SelectAppPanel.jsx","webpack:///./node_modules/graphql-language-service-utils/esm sync ^.*\\.js$","webpack:///./node_modules/graphql-language-service-utils/esm sync ^.*\\.json$","webpack:///./node_modules/graphql-language-service-utils/esm lazy ^.*\\.js$ namespace object","webpack:///./node_modules/graphql-language-service-utils/esm lazy ^.*\\.json$ namespace object","webpack:///./source/src/app/components/Apis/Details/GraphQLConsole/GraphQLAuthentication.jsx","webpack:///./source/src/app/components/Apis/Details/GraphQLConsole/GraphQLUI.jsx","webpack:///./source/src/app/components/Apis/Details/GraphQLConsole/GraphQLConsole.jsx"],"names":["SelectAppPanel","props","subscriptions","handleChanges","selectedApplication","selectedKeyType","Fragment","display","justifyContent","xs","md","fullWidth","id","select","label","defaultMessage","value","name","onChange","SelectProps","helperText","margin","variant","map","sub","applicationInfo","applicationId","key","ml","find","status","webpackContext","req","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","webpackEmptyContext","webpackAsyncContext","ids","Promise","all","slice","then","webpackEmptyAsyncContext","useStyles","makeStyles","theme","buttonIcon","marginRight","centerItems","tokenType","inputAdornmentStart","minWidth","spacing","paper","padding","grid","marginTop","marginBottom","paddingRight","userNotificationPaper","titleSub","marginLeft","paddingTop","paddingBottom","usernameField","width","passwordField","GraphQLAuthentication","classes","accessToken","setAccessTocken","authorizationHeader","securitySchemeType","setSecuritySchemeType","prefix","isApiKeyEnabled","isBasicAuthEnabled","isOAuthEnabled","setURLs","environmentObject","setFound","username","setUserName","password","setPassword","api","useContext","ApiContext","user","AuthManager","getUser","showToken","setShowToken","useState","setSubscriptions","setSelectedApplication","setSelectedKeyType","environments","endpointURLs","endpoint","environmentName","selectedEnvironment","setSelectedEnvironment","setKeys","isPrototypedAPI","lifeCycleStatus","toLowerCase","useEffect","apiID","apiClient","Api","getSubscriptions","subscriptionsResponse","subs","obj","list","filter","item","length","sApplication","Application","get","application","getKeys","appKeys","catch","error","Paper","className","Grid","container","Typography","component","Icon","Box","event","target","promiseApp","keyType","accessTokenValue","token","CircularProgress","size","gutterBottom","TextField","urls","elm","URLs","MenuItem","disabled","env","x","type","InputProps","endAdornment","InputAdornment","position","IconButton","edge","aria-label","onClick","startAdornment","FormControl","RadioGroup","row","FormControlLabel","control","Radio","propTypes","PropTypes","shape","string","isRequired","root","buildSchema","require","GraphQLUI","schema","setSchema","query","setQuery","isExplorerOpen","setIsExplorerOpen","graphiqlEl","useRef","getGraphQLSchemaByAPIId","res","graphqlSchemaObj","data","parameters","handleToggleExplorer","newExplorerIsOpen","Progress","m","https","styles","onEdit","explorerIsOpen","onToggleExplorer","height","flexGrow","ref","fetcher","graphQLParams","btoa","fetch","method","headers","Accept","body","JSON","stringify","response","json","onEditQuery","Toolbar","Button","current","handlePrettifyQuery","title","handleToggleHistory","GraphQLConsole","notFound","securityScheme","includes"],"mappings":"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","file":"GraphQLConsole.bundle.js","sourcesContent":["import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@material-ui/core/Grid';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\n\nconst SelectAppPanel = (props) => {\n    const {\n        subscriptions, handleChanges, selectedApplication, selectedKeyType,\n    } = props;\n    return (\n        <React.Fragment>\n            <Box display='flex' justifyContent='center'>\n\n                <Grid xs={12} md={3} >\n                    <Box >\n                        <TextField\n                            fullWidth\n                            id='outlined-select-currency'\n                            select\n                            label={<FormattedMessage\n                                defaultMessage='Appplications'\n                                id='Apis.Details.ApiConsole.SelectAppPanel.applications'\n                            />}\n                            value={selectedApplication}\n                            name='selectedApplication'\n                            onChange={handleChanges}\n                            SelectProps={subscriptions}\n                            helperText={<FormattedMessage\n                                defaultMessage='Please select an application'\n                                id='Apis.Details.ApiConsole.SelectAppPanel.select.an.application'\n                            />}\n                            margin='normal'\n                            variant='outlined'\n                        >\n                            {subscriptions.map(sub => (\n                                <MenuItem value={sub.applicationInfo.applicationId} key={sub.applicationInfo.applicationId}>\n                                    {sub.applicationInfo.name}\n                                </MenuItem>\n                            ))}\n                        </TextField>\n                    </Box>\n                </Grid>\n                <Grid xs={12} md={3} >\n                    <Box ml={2}>\n                        <TextField\n                            fullWidth\n                            id='outlined-select-currency'\n                            select\n                            label={<FormattedMessage\n                                defaultMessage='Key Type'\n                                id='Apis.Details.ApiConsole.SelectAppPanel.key.type'\n                            />}\n                            value={selectedKeyType}\n                            name='selectedKeyType'\n                            onChange={handleChanges}\n                            helperText={<FormattedMessage\n                                defaultMessage='Please select a key type'\n                                id='Apis.Details.ApiConsole.SelectAppPanel.select.key.type'\n                            />}\n                            margin='normal'\n                            variant='outlined'\n                        >\n                            {(subscriptions != null && subscriptions.find(sub => sub.applicationId === selectedApplication).status === 'UNBLOCKED') &&\n                            <MenuItem value='PRODUCTION'>\n                                <FormattedMessage\n                                    id='Apis.Details.ApiConsole.SelectAppPanel.production'\n                                    defaultMessage='PRODUCTION'\n                                />\n                            </MenuItem>\n                            }\n                            <MenuItem value='SANDBOX'>\n                                <FormattedMessage\n                                    id='Apis.Details.ApiConsole.SelectAppPanel.sandbox'\n                                    defaultMessage='SANDBOX'\n                                />\n                            </MenuItem>\n                        </TextField>\n                    </Box>\n                </Grid>\n            </Box>\n\n        </React.Fragment>\n    );\n};\n\nexport default SelectAppPanel;\n","var map = {\n\t\"./Range.js\": 1281,\n\t\"./file.js\": 1339,\n\t\"./getASTNodeAtPosition.js\": 1338,\n\t\"./index.js\": 1309,\n\t\"./validateWithCustomRules.js\": 1403\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 2121;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 2122;","var map = {\n\t\"./Range.js\": [\n\t\t1281\n\t],\n\t\"./file.js\": [\n\t\t1339\n\t],\n\t\"./getASTNodeAtPosition.js\": [\n\t\t1338\n\t],\n\t\"./index.js\": [\n\t\t1309\n\t],\n\t\"./validateWithCustomRules.js\": [\n\t\t1403\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 2123;\nmodule.exports = webpackAsyncContext;","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 2124;","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport AuthManager from 'AppData/AuthManager';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Icon from '@material-ui/core/Icon';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport {\n    Radio, RadioGroup, FormControlLabel, FormControl,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport SelectAppPanel from '../ApiConsole/SelectAppPanel';\nimport Application from '../../../../data/Application';\nimport { ApiContext } from '../ApiContext';\nimport Api from '../../../../data/api';\n\nconst useStyles = makeStyles((theme) => ({\n    buttonIcon: {\n        marginRight: 10,\n    },\n    centerItems: {\n        margin: 'auto',\n    },\n    tokenType: {\n        margin: 'auto',\n        display: 'flex',\n    },\n    inputAdornmentStart: {\n        minWidth: theme.spacing(18),\n    },\n    paper: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n    grid: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(4),\n        paddingRight: theme.spacing(2),\n        justifyContent: 'center',\n    },\n    userNotificationPaper: {\n        padding: theme.spacing(2),\n    },\n    titleSub: {\n        marginLeft: theme.spacing(2),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n    usernameField: {\n        width: '100%',\n    },\n    passwordField: {\n        width: '100%',\n        marginLeft: theme.spacing(1),\n    },\n}));\n\n\n/**\n *\n * @param {*} props\n */\nexport default function GraphQLAuthentication(props) {\n    const classes = useStyles();\n\n    const {\n        accessToken,\n        setAccessTocken,\n        authorizationHeader,\n        securitySchemeType,\n        setSecuritySchemeType,\n        prefix,\n        isApiKeyEnabled,\n        isBasicAuthEnabled,\n        isOAuthEnabled,\n        setURLs,\n        environmentObject,\n        setFound,\n        username,\n        setUserName,\n        password,\n        setPassword,\n    } = props;\n\n    const { api } = useContext(ApiContext);\n    const user = AuthManager.getUser();\n    const [showToken, setShowToken] = useState(false);\n    const [subscriptions, setSubscriptions] = useState(null);\n    const [selectedApplication, setSelectedApplication] = useState('');\n    const [selectedKeyType, setSelectedKeyType] = useState('PRODUCTION');\n    const environments = api.endpointURLs.map((endpoint) => endpoint.environmentName);\n    const [selectedEnvironment, setSelectedEnvironment] = useState(environments[0]);\n    const [keys, setKeys] = useState();\n    const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n    useEffect(() => {\n        const apiID = api.id;\n        const apiClient = new Api();\n\n        if (user != null) {\n            const promiseSubscription = apiClient.getSubscriptions(apiID);\n\n            promiseSubscription\n                .then((subscriptionsResponse) => {\n                    const subs = subscriptionsResponse.obj.list.filter(\n                        (item) => item.status === 'UNBLOCKED' || item.status === 'PROD_ONLY_BLOCKED',\n                    );\n\n                    if (subs && subs.length > 0) {\n                        const sApplication = subs[0].applicationId;\n                        setSelectedApplication(sApplication);\n                        const promiseApp = Application.get(sApplication);\n                        promiseApp\n                            .then((application) => {\n                                return application.getKeys();\n                            })\n                            .then((appKeys) => {\n                                if (appKeys.get('SANDBOX')) {\n                                    setSelectedKeyType('SANDBOX');\n                                } else if (appKeys.get('PRODUCTION')) {\n                                    setSelectedKeyType('PRODUCTION');\n                                }\n                                setKeys(appKeys);\n                            });\n                    }\n                    setSubscriptions(subs);\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.error(error);\n                    }\n                    const { status } = error;\n                    if (status === 404) {\n                        setFound(true);\n                    }\n                });\n        }\n    }, []);\n\n    /**\n     *\n     * @param {React.SyntheticEvent} event\n     */\n    const handleChanges = (event) => {\n        const { value, name } = event.target;\n        if (name === 'selectedApplication') {\n            const promiseApp = Application.get(value);\n            let keyType;\n\n            setSelectedApplication(value);\n\n            if (subscriptions != null && subscriptions.find((sub) => sub.applicationId\n                === selectedApplication).status === 'PROD_ONLY_BLOCKED') {\n                setSelectedKeyType('SANDBOX');\n                keyType = 'SANDBOX';\n            } else {\n                keyType = selectedKeyType;\n            }\n\n            promiseApp\n                .then((application) => {\n                    return application.getKeys();\n                })\n                .then((appKeys) => {\n                    if (appKeys.get(keyType)) {\n                        const { accessToken: accessTokenValue } = appKeys.get(keyType).token;\n                        setAccessTocken(accessTokenValue);\n                    } else {\n                        setAccessTocken('');\n                    }\n                    setKeys(appKeys);\n                });\n        } else {\n            setSelectedKeyType(value);\n\n            if (keys.get(value)) {\n                const { accessToken: accessTokenValue } = keys.get(value).token;\n                setAccessTocken(accessTokenValue);\n            } else {\n                setAccessTocken('');\n            }\n        }\n    };\n\n\n    /**\n     * Set the environment and URLs for selected environment name\n     * @param {*} event\n     */\n    const handleEnvironemtChange = (event) => {\n        const { value } = event.target;\n        setSelectedEnvironment(value);\n        const urls = environmentObject.find((elm) => value === elm.environmentName).URLs;\n        setURLs(urls);\n    };\n\n\n    /**\n     * Handle onClick of shown access token\n     */\n    const handleClickShowToken = () => {\n        setShowToken(!showToken);\n    };\n\n\n    /**\n     * Load the access token for selected key type\n     * @param {*} event\n     */\n    const handleaccessTockenChanges = (event) => {\n        const { value } = event.target;\n        setAccessTocken(value);\n    };\n\n    /**\n     * Set the security scheme type for selected security scheme type\n     * @param {*} event\n     */\n    const handlesecuritySchemeType = (event) => {\n        const { value } = event.target;\n        setSecuritySchemeType(value);\n    };\n\n    const handleUserName = (event) => {\n        const { value } = event.target;\n        setUserName(value);\n    };\n\n    const handlePassword = (event) => {\n        const { value } = event.target;\n        setPassword(value);\n    };\n\n\n    return (\n        <>\n            <Paper className={classes.paper}>\n                <Grid container className={classes.grid}>\n                    {!isPrototypedAPI && !user && (\n                        <Grid item md={6}>\n                            <Paper className={classes.userNotificationPaper}>\n                                <Typography variant='h5' component='h3'>\n                                    <Icon>warning</Icon>\n                                    {' '}\n                                    <FormattedMessage id='notice' defaultMessage='Notice' />\n                                </Typography>\n                                <Typography component='p'>\n                                    <FormattedMessage\n                                        id={'Apis.Details.GraphQLConsole.'\n                                            + 'GraphQLAuthentication.require.access.token'}\n                                        defaultMessage={'You need an access token to try the API. Please log '\n                                            + 'in and subscribe to the API to generate an access token. If you already '\n                                            + 'have an access token, please provide it below.'}\n                                    />\n                                </Typography>\n                            </Paper>\n                        </Grid>\n                    )}\n                    {!isPrototypedAPI\n                        && (\n                            <Grid xs={12} md={12} item>\n                                <Box display='block'>\n                                    {user && subscriptions && subscriptions.length > 0 && (\n                                        <SelectAppPanel\n                                            subscriptions={subscriptions}\n                                            handleChanges={handleChanges}\n                                            selectedApplication={selectedApplication}\n                                            selectedKeyType={selectedKeyType}\n                                        />\n                                    )}\n                                    {user && subscriptions === null && (\n                                        <Box display='flex' justifyContent='center'>\n                                            <CircularProgress size={35} />\n                                        </Box>\n                                    )}\n                                    {subscriptions && subscriptions.length === 0 && (\n                                        <Box display='flex' justifyContent='center'>\n                                            <Typography variant='body1' gutterBottom>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.GraphQLConsole.'\n                                                        + 'GraphQLAuthentication.please.subscribe.to.application'}\n                                                    defaultMessage='Please subscribe to an application'\n                                                />\n                                            </Typography>\n                                        </Box>\n                                    )}\n\n                                    <Box display='flex' justifyContent='center'>\n                                        <Grid xs={12} md={6} item>\n                                            {(environments && environments.length > 0)\n                                                && (\n                                                    <TextField\n                                                        fullWidth\n                                                        select\n                                                        label={(\n                                                            <FormattedMessage\n                                                                defaultMessage='Environment'\n                                                                id={'Apis.Details.GraphQLConsole.'\n                                                                    + 'GraphQLAuthentication.env'}\n                                                            />\n                                                        )}\n                                                        value={selectedEnvironment}\n                                                        name='selectedEnvironment'\n                                                        onChange={handleEnvironemtChange}\n                                                        helperText={(\n                                                            <FormattedMessage\n                                                                defaultMessage='Please select an environment'\n                                                                id={'Apis.Details.GraphQLConsole.'\n                                                                    + 'SelectAppPanel.select.env'}\n                                                            />\n                                                        )}\n                                                        margin='normal'\n                                                        variant='outlined'\n                                                    >\n                                                        {environments && environments.length > 0 && (\n                                                            <MenuItem value='' disabled>\n                                                                <em>\n                                                                    <FormattedMessage\n                                                                        id='api.gateways'\n                                                                        defaultMessage='API Gateways'\n                                                                    />\n                                                                </em>\n                                                            </MenuItem>\n                                                        )}\n                                                        {environments && (\n                                                            environments.map((env) => (\n                                                                <MenuItem value={env} key={env}>\n                                                                    {env}\n                                                                </MenuItem>\n                                                            )))}\n                                                    </TextField>\n                                                )}\n                                        </Grid>\n                                    </Box>\n\n                                    <Box display='block' justifyContent='center'>\n                                        <Grid x={12} md={6} className={classes.tokenType} item>\n                                            {securitySchemeType === 'BASIC' ? (\n                                                <>\n                                                    <TextField\n                                                        margin='normal'\n                                                        variant='outlined'\n                                                        className={classes.usernameField}\n                                                        label={\n                                                            <FormattedMessage id='username' defaultMessage='Username' />\n                                                        }\n                                                        name='username'\n                                                        onChange={handleUserName}\n                                                        value={username || ''}\n\n                                                    />\n                                                    <TextField\n                                                        margin='normal'\n                                                        variant='outlined'\n                                                        className={classes.passwordField}\n                                                        label={\n                                                            <FormattedMessage id='password' defaultMessage='Password' />\n                                                        }\n                                                        name='password'\n                                                        onChange={handlePassword}\n                                                        value={password || ''}\n\n                                                    />\n                                                </>\n                                            ) : (\n                                                <TextField\n                                                    fullWidth\n                                                    margin='normal'\n                                                    variant='outlined'\n                                                    label={(\n                                                        <FormattedMessage\n                                                            id='access.token'\n                                                            defaultMessage='Access Token'\n                                                        />\n                                                    )}\n                                                    name='accessToken'\n                                                    onChange={handleaccessTockenChanges}\n                                                    type={showToken ? 'text' : 'password'}\n                                                    value={accessToken || ''}\n                                                    helperText={(\n                                                        <FormattedMessage\n                                                            id='enter.access.token'\n                                                            defaultMessage='Enter access Token'\n                                                        />\n                                                    )}\n                                                    InputProps={{\n                                                        endAdornment: (\n                                                            <InputAdornment position='end'>\n                                                                <IconButton\n                                                                    edge='end'\n                                                                    aria-label='Toggle token visibility'\n                                                                    onClick={handleClickShowToken}\n                                                                >\n                                                                    {showToken ? <Icon>visibility_off</Icon>\n                                                                        : <Icon>visibility</Icon>}\n                                                                </IconButton>\n                                                            </InputAdornment>\n                                                        ),\n                                                        startAdornment: (\n                                                            <InputAdornment\n                                                                className={classes.inputAdornmentStart}\n                                                                position='start'\n                                                            >\n                                                                {`${authorizationHeader}: ${prefix}`}\n                                                            </InputAdornment>\n                                                        ),\n                                                        // eslint-disable-next-line indent\n                                                        }}\n                                                />\n                                            )}\n                                        </Grid>\n                                        <Grid x={12} md={6} className={classes.centerItems}>\n                                            {(isApiKeyEnabled || isBasicAuthEnabled || isOAuthEnabled) && (\n                                                <FormControl component='fieldset'>\n                                                    <RadioGroup\n                                                        name='securityScheme'\n                                                        value={securitySchemeType}\n                                                        onChange={handlesecuritySchemeType}\n                                                        row\n                                                    >\n                                                        {isOAuthEnabled && (\n                                                            <FormControlLabel\n                                                                value='OAUTH'\n                                                                control={<Radio />}\n                                                                label='Referenced (OAuth)'\n                                                            />\n                                                        )}\n                                                        {isBasicAuthEnabled && (\n                                                            <FormControlLabel\n                                                                value='BASIC'\n                                                                control={<Radio />}\n                                                                label='Basic'\n                                                            />\n                                                        )}\n                                                        {isApiKeyEnabled && (\n                                                            <FormControlLabel\n                                                                value='API-KEY'\n                                                                control={<Radio />}\n                                                                label='API Key'\n                                                            />\n                                                        )}\n                                                    </RadioGroup>\n                                                </FormControl>\n                                            )}\n                                        </Grid>\n                                    </Box>\n\n                                </Box>\n                            </Grid>\n                        )}\n                </Grid>\n            </Paper>\n        </>\n    );\n}\n\n\nGraphQLAuthentication.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n        titleSub: PropTypes.string.isRequired,\n        grid: PropTypes.string.isRequired,\n        userNotificationPaper: PropTypes.string.isRequired,\n        root: PropTypes.string.isRequired,\n        inputAdornmentStart: PropTypes.string.isRequired,\n        centerItems: PropTypes.string.isRequired,\n    }).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useState, useEffect, useRef, useContext,\n} from 'react';\nimport GraphiQL from 'graphiql';\nimport fetch from 'isomorphic-fetch';\nimport 'graphiql/graphiql.css';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport Box from '@material-ui/core/Box';\nimport { FormattedMessage } from 'react-intl';\nimport GraphiQLExplorer from 'graphiql-explorer';\nimport { ApiContext } from '../ApiContext';\nimport Api from '../../../../data/api';\n\nimport Progress from '../../../Shared/Progress';\n\nconst { buildSchema } = require('graphql');\n\n/**\n *\n * @param {*} props\n */\nexport default function GraphQLUI(props) {\n    const {\n        accessToken,\n        authorizationHeader,\n        URLs,\n        securitySchemeType,\n        username,\n        password,\n    } = props;\n    const { api } = useContext(ApiContext);\n    const [schema, setSchema] = useState(null);\n    const [query, setQuery] = useState('');\n    const [isExplorerOpen, setIsExplorerOpen] = useState(false);\n    const graphiqlEl = useRef(null);\n    useEffect(() => {\n        const apiID = api.id;\n        const apiClient = new Api();\n        const promiseGraphQL = apiClient.getGraphQLSchemaByAPIId(apiID);\n\n        promiseGraphQL\n            .then((res) => {\n                const graphqlSchemaObj = buildSchema(res.data);\n                setSchema(graphqlSchemaObj);\n            });\n    }, []);\n\n    const parameters = {};\n\n    const handleToggleExplorer = () => {\n        const newExplorerIsOpen = !isExplorerOpen;\n        parameters.isExplorerOpen = newExplorerIsOpen;\n        setIsExplorerOpen(newExplorerIsOpen);\n    };\n\n    /**\n     *\n     * @param {*} graphQLParams\n     */\n    function graphQLFetcher(graphQLParams) {\n        let token;\n        if (authorizationHeader === 'apikey') {\n            token = accessToken;\n        } else if (securitySchemeType === 'BASIC') {\n            const credentials = username + ':' + password;\n            token = 'Basic ' + btoa(credentials);\n        } else {\n            token = 'Bearer ' + accessToken;\n        }\n        return fetch((URLs.https), {\n            method: 'post',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                [authorizationHeader]: token,\n            },\n            body: JSON.stringify(graphQLParams),\n        }).then((response) => response.json());\n    }\n    if ({ schema } === null) {\n        return <Progress />;\n    } else {\n        return (\n            <>\n                <Box width='30%' m={1}>\n                    <TextField\n\n                        label={(\n                            <FormattedMessage\n                                defaultMessage='Gateway URLs'\n                                id='Apis.Details.GraphQLConsole.GraphQLUI.URLs'\n                            />\n                        )}\n                        value={URLs.https}\n                        name='selectedURL'\n                        fullWidth\n                        margin='normal'\n                        variant='outlined'\n                        InputProps={URLs.https}\n                    />\n                </Box>\n                <div styles={{ width: '100%' }}>\n                    <Box display='flex'>\n                        <Box display='flex'>\n                            <GraphiQLExplorer\n                                schema={schema}\n                                query={query}\n                                onEdit={setQuery}\n                                explorerIsOpen={isExplorerOpen}\n                                onToggleExplorer={handleToggleExplorer}\n                            />\n                        </Box>\n                        <Box display='flex' height='800px' flexGrow={1}>\n                            <GraphiQL\n                                ref={graphiqlEl}\n                                fetcher={(graphQLFetcher)}\n                                schema={schema}\n                                query={query}\n                                onEditQuery={setQuery}\n                            >\n                                <GraphiQL.Toolbar>\n                                    <GraphiQL.Button\n                                        onClick={() => graphiqlEl.current.handlePrettifyQuery()}\n                                        label='Prettify'\n                                        title='Prettify Query (Shift-Ctrl-P)'\n                                    />\n                                    <GraphiQL.Button\n                                        onClick={() => graphiqlEl.current.handleToggleHistory()}\n                                        label='History'\n                                        title='Show History'\n                                    />\n                                    <GraphiQL.Button\n                                        onClick={() => setIsExplorerOpen(!isExplorerOpen)}\n                                        label='Explorer'\n                                        title='Toggle Explorer'\n                                    />\n                                </GraphiQL.Toolbar>\n\n                            </GraphiQL>\n                        </Box>\n                    </Box>\n                </div>\n            </>\n        );\n    }\n}\n\nGraphQLUI.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n    }).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useContext } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GraphQLAuthentication from './GraphQLAuthentication';\nimport GraphQLUI from './GraphQLUI';\nimport { ApiContext } from '../ApiContext';\nimport Progress from '../../../Shared/Progress';\n\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n    titleSub: {\n        marginLeft: theme.spacing(2),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n}));\n\n\nexport default function GraphQLConsole() {\n    const classes = useStyles();\n    const { api } = useContext(ApiContext);\n    const environmentObject = api.endpointURLs;\n    const [URLs, setURLs] = useState(environmentObject[0].URLs);\n    const [accessToken, setAccessTocken] = useState('');\n    const [securitySchemeType, setSecuritySchemeType] = useState('OAUTH');\n    const [notFound, setFound] = useState(false);\n    const [username, setUserName] = useState('');\n    const [password, setPassword] = useState('');\n\n    if (api == null) {\n        return <Progress />;\n    }\n    if (notFound) {\n        return 'API Not found !';\n    }\n    let isApiKeyEnabled = false;\n    let isBasicAuthEnabled = false;\n    let isOAuthEnabled = false;\n    let authorizationHeader = api.authorizationHeader ? api.authorizationHeader : 'Authorization';\n    let prefix = 'Bearer';\n\n    if (api && api.securityScheme) {\n        isApiKeyEnabled = api.securityScheme.includes('api_key');\n        isBasicAuthEnabled = api.securityScheme.includes('basic_auth');\n        isOAuthEnabled = api.securityScheme.includes('oauth2');\n        if (isApiKeyEnabled && securitySchemeType === 'API-KEY') {\n            authorizationHeader = 'apikey';\n            prefix = '';\n        }\n    }\n\n    return (\n        <>\n            <Typography variant='h4' className={classes.titleSub}>\n                <FormattedMessage id='Apis.Details.GraphQLConsole.GraphQLConsole.title' defaultMessage='Try Out' />\n            </Typography>\n\n            <GraphQLAuthentication\n                api={api}\n                securitySchemeType={securitySchemeType}\n                setSecuritySchemeType={setSecuritySchemeType}\n                username={username}\n                setUserName={setUserName}\n                password={password}\n                setPassword={setPassword}\n                prefix={prefix}\n                isApiKeyEnabled={isApiKeyEnabled}\n                isOAuthEnabled={isOAuthEnabled}\n                isBasicAuthEnabled={isBasicAuthEnabled}\n                accessToken={accessToken}\n                setAccessTocken={setAccessTocken}\n                authorizationHeader={authorizationHeader}\n                setURLs={setURLs}\n                environmentObject={environmentObject}\n                setFound={setFound}\n            />\n\n            <Paper className={classes.paper}>\n                <GraphQLUI\n                    accessToken={accessToken}\n                    authorizationHeader={authorizationHeader}\n                    URLs={URLs}\n                    username={username}\n                    password={password}\n                    securitySchemeType={securitySchemeType}\n                />\n            </Paper>\n        </>\n    );\n}\n\nGraphQLConsole.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n        titleSub: PropTypes.string.isRequired,\n        root: PropTypes.string.isRequired,\n    }).isRequired,\n};\n"],"sourceRoot":""}