{"version":3,"sources":["webpack:///./node_modules/js-file-download/file-download.js","webpack:///./source/src/app/components/Apis/Details/Sdk.jsx"],"names":["module","exports","data","filename","mime","bom","blob","Blob","type","window","navigator","msSaveBlob","blobURL","URL","createObjectURL","tempLink","document","createElement","style","display","href","setAttribute","download","body","appendChild","click","removeChild","revokeObjectURL","Sdk","React","Component","constructor","props","super","event","item","apiId","this","api_uuid","language","getSdkForApi","updatedList","state","sdkLanguages","filter","toLowerCase","search","target","value","setState","items","ev","src","app","context","match","params","apiUuid","filter_threshold","bind","handleClick","handleChange","addDefaultSrc","componentDidMount","api","Api","AuthManager","getUser","getSdkLanguages","then","response","obj","length","catch","error","status","notFound","getSdk","sdkZipName","headers","sdkZip","JSFileDownload","badRequest","serverError","render","languageList","onlyIcons","intl","classes","theme","custom","apiDetailPages","onlyShowSdks","filteredLanguageList","lang","includes","Fragment","map","index","xs","key","onClick","cursor","alt","String","width","height","margin","className","titleWrappper","variant","titleSub","id","defaultMessage","label","formatMessage","name","onChange","container","spacing","gridRoot","sm","md","lg","xl","justify","textAlign","toString","toUpperCase","title","root","cardTitle","onError","color","genericMessageWrapper","dialogContainer","component","propTypes","PropTypes","instanceOf","Object","isRequired","injectIntl","withStyles","marginLeft","paddingTop","paddingBottom","alignItems","marginRight","background","palette","grey","withTheme"],"mappings":"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","file":"APISdk.bundle.js","sourcesContent":["module.exports = function(data, filename, mime, bom) {\n    var blobData = (typeof bom !== 'undefined') ? [bom, data] : [data]\n    var blob = new Blob(blobData, {type: mime || 'application/octet-stream'});\n    if (typeof window.navigator.msSaveBlob !== 'undefined') {\n        // IE workaround for \"HTML7007: One or more blob URLs were \n        // revoked by closing the blob for which they were created. \n        // These URLs will no longer resolve as the data backing \n        // the URL has been freed.\"\n        window.navigator.msSaveBlob(blob, filename);\n    }\n    else {\n        var blobURL = window.URL.createObjectURL(blob);\n        var tempLink = document.createElement('a');\n        tempLink.style.display = 'none';\n        tempLink.href = blobURL;\n        tempLink.setAttribute('download', filename); \n        \n        // Safari thinks _blank anchor are pop ups. We only want to set _blank\n        // target if the browser does not support the HTML5 download attribute.\n        // This allows you to download files in desktop safari if pop up blocking \n        // is enabled.\n        if (typeof tempLink.download === 'undefined') {\n            tempLink.setAttribute('target', '_blank');\n        }\n        \n        document.body.appendChild(tempLink);\n        tempLink.click();\n        document.body.removeChild(tempLink);\n        window.URL.revokeObjectURL(blobURL);\n    }\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Icon from '@material-ui/core/Icon';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport JSFileDownload from 'js-file-download';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport { withStyles, withTheme } from '@material-ui/core/styles';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport AuthManager from 'AppData/AuthManager';\nimport { app } from 'Settings';\nimport Api from '../../../data/api';\n\nconst styles = theme => ({\n    genericMessageWrapper: {\n        margin: theme.spacing(2),\n    },\n    titleSub: {\n        marginLeft: theme.spacing(3),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n    gridRoot: {\n        marginLeft: theme.spacing(2),\n    },\n    titleWrappper: {\n        display: 'flex',\n        alignItems: 'center',\n        '& h4' : {\n            marginRight: theme.spacing(1),\n        },\n    },\n    cardTitle: {\n        background: theme.palette.grey[50],\n    },\n});\n\n/**\n *\n *\n * @class Sdk\n * @extends {React.Component}\n */\nclass Sdk extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sdkLanguages: null,\n            items: null,\n        };\n        const { match, apiId } = this.props;\n        this.api_uuid = match ? match.params.apiUuid : apiId;\n        this.filter_threshold = 5;\n        this.getSdkForApi = this.getSdkForApi.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.addDefaultSrc = this.addDefaultSrc.bind(this);\n    }\n\n    /**\n     *\n     *\n     * @memberof Sdk\n     */\n    componentDidMount() {\n        const api = new Api();\n        const user = AuthManager.getUser();\n        if (user != null) {\n            const promised_languages = api.getSdkLanguages();\n\n            promised_languages\n                .then((response) => {\n                    if (response.obj.length === 0) {\n                        this.setState({ sdkLanguages: false });\n                        return;\n                    }\n                    this.setState({ sdkLanguages: response.obj });\n                    this.setState({ items: response.obj });\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.log(error);\n                    }\n                    const status = error.status;\n                    if (status === 404) {\n                        this.setState({ notFound: true });\n                    }\n                });\n        }\n    }\n\n    /**\n     * Call the REST API to generate the SDK\n     *\n     * @param {*} apiId\n     * @param {*} language\n     * @memberof Sdk\n     */\n    getSdkForApi(apiId, language) {\n        const api = new Api();\n        const promised_sdk = api.getSdk(apiId, language);\n\n        promised_sdk\n            .then((response) => {\n                const sdkZipName = response.headers['content-disposition'].match(/filename=\"(.+)\"/)[1];\n                const sdkZip = response.data;\n                // Prompt to download zip file for the SDK\n                JSFileDownload(sdkZip, sdkZipName);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const status = error.status;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 400) {\n                    this.setState({ badRequest: true });\n                } else if (status === 500) {\n                    this.setState({ serverError: true });\n                }\n            });\n    }\n\n    /**\n     * Handle the click event of the download button\n     *\n     * @memberof Sdk\n     */\n    handleClick = (event, item) => {\n        const apiId = this.api_uuid;\n        const language = item;\n        this.getSdkForApi(apiId, language);\n    };\n\n    /**\n     * Handle the change event of the Search input field\n     *\n     * @memberof Sdk\n     */\n    handleChange = (event) => {\n        let updatedList = this.state.sdkLanguages;\n        updatedList = updatedList.filter((item) => {\n            return item.toLowerCase().search(event.target.value.toLowerCase()) !== -1;\n        });\n        this.setState({ items: updatedList });\n    };\n\n    /**\n     * Handle sdk image not found issue. Point to a default image\n     */\n    addDefaultSrc = (ev) => {\n        ev.target.src = app.context + '/site/public/images/sdks/default.svg';\n    };\n\n    /**\n     *\n     *\n     * @returns\n     * @memberof Sdk\n     */\n    render() {\n        const languageList = this.state.items;\n        const {\n            onlyIcons, intl, classes, theme,\n        } = this.props;\n        const {\n            custom: {\n                apiDetailPages: { onlyShowSdks },\n            },\n        } = theme;\n        const filteredLanguageList =\n        languageList && languageList.length > 0 && onlyShowSdks && onlyShowSdks.length > 0\n                ? languageList.filter(lang => onlyShowSdks.includes(lang.toLowerCase()))\n                : languageList;\n        if (onlyIcons) {\n            return (\n                filteredLanguageList && (\n                    <React.Fragment>\n                        {filteredLanguageList.map((language, index) =>\n                            index < 3 && (\n                                <Grid item xs={4} key={index}>\n                                    <a\n                                        onClick={event => this.handleClick(event, language)}\n                                        style={{ cursor: 'pointer' }}\n                                    >\n                                        <img\n                                            alt={language}\n                                            src={\n                                                app.context +\n                                                    '/site/public/images/sdks/' +\n                                                    new String(language) +\n                                                    '.svg'\n                                            }\n                                            style={{\n                                                width: 80,\n                                                height: 80,\n                                                margin: 10,\n                                            }}\n                                        />\n                                    </a>\n                                </Grid>\n                            ))}\n                    </React.Fragment>\n                )\n            );\n        }\n        return (\n            <React.Fragment>\n                <div className={classes.titleWrappper}>\n                    <Typography variant='h4' className={classes.titleSub}>\n                        <FormattedMessage id='Apis.Details.Sdk.title' defaultMessage='Software Development Kits (SDKs)' />\n                    </Typography>\n                    {filteredLanguageList && this.state.sdkLanguages.length >= this.filter_threshold && (\n                        <TextField\n                            variant=\"outlined\"\n                            id='search'\n                            label={intl.formatMessage({\n                                defaultMessage: 'Search SDK',\n                                id: 'Apis.Details.Sdk.search.sdk',\n                            })}\n                            type='text'\n                            margin='normal'\n                            name='searchSdk'\n                            onChange={this.handleChange}\n                        />\n                    )}\n                </div>\n                {filteredLanguageList ? (\n                    <Grid container className='tab-grid' spacing={0} className={classes.gridRoot}>\n                        <Grid item xs={12} sm={6} md={9} lg={9} xl={10}>\n                            <Grid container justify='flex-start' spacing={4}>\n                                {filteredLanguageList.map((language, index) => (\n                                    <Grid key={index} item key={index}>\n                                        <div style={{ width: 'auto', textAlign: 'center', margin: '10px' }}>\n                                            <Card>\n                                                <div>{language.toString().toUpperCase()}</div>\n                                                <Divider />\n                                                <CardMedia\n                                                    title={language.toString().toUpperCase()}\n                                                    src={\n                                                        '/devportal/site/public/images/sdks/' +\n                                                        new String(language) +\n                                                        '.svg'\n                                                    }\n                                                    classes={{root: classes.cardTitle}}\n                                                >\n                                                    <img\n                                                        alt={language}\n                                                        onError={this.addDefaultSrc}\n                                                        src={`/devportal/site/public/images/sdks/${language}.svg`}\n                                                        style={{ width: '100px', height: '100px', margin: '30px' }}\n                                                    />\n                                                </CardMedia>\n                                                <CardActions>\n                                                    <Grid container justify='center'>\n                                                        <Button\n                                                            color='secondary'\n                                                            onClick={event => this.handleClick(event, language)}\n                                                        >\n                                                            <Icon>arrow_downward</Icon>\n                                                            {'Download'}\n                                                        </Button>\n                                                    </Grid>\n                                                </CardActions>\n                                            </Card>\n                                        </div>\n                                    </Grid>\n                                ))}\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                ) : (\n                    <div className={classes.genericMessageWrapper}>\n                        <InlineMessage type='info' className={classes.dialogContainer}>\n                            <Typography variant='h5' component='h3'>\n                                <FormattedMessage id='Apis.Details.Sdk.no.sdks' defaultMessage='No SDKs' />\n                            </Typography>\n                            <Typography component='p'>\n                                <FormattedMessage\n                                    id='Apis.Details.Sdk.no.sdks.content'\n                                    defaultMessage='No SDKs available for this API'\n                                />\n                            </Typography>\n                        </InlineMessage>\n                    </div>\n                )}\n            </React.Fragment>\n        );\n    }\n}\n\nSdk.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(Sdk));\n"],"sourceRoot":""}