{"version":3,"sources":["webpack:///./node_modules/js-file-download/file-download.js","webpack:///./source/src/app/components/Apis/Details/Documents/View.jsx","webpack:///./source/src/app/components/Apis/Details/Sdk.jsx","webpack:///./source/src/app/components/Apis/Details/Resources.jsx","webpack:///./source/src/app/components/Apis/Details/Operations.jsx","webpack:///./source/src/app/components/Apis/Details/OverviewDocuments.jsx","webpack:///./source/src/app/components/Apis/Details/Overview.jsx"],"names":["module","exports","data","filename","mime","bom","blob","Blob","type","window","navigator","msSaveBlob","blobURL","URL","createObjectURL","tempLink","document","createElement","style","display","href","setAttribute","download","body","appendChild","click","removeChild","revokeObjectURL","View","props","classes","doc","apiId","fullScreen","intl","api","useContext","ApiContext","code","setCode","useState","isFileAvailable","setIsFileAvailable","restAPI","API","useEffect","sourceType","loadContentForDoc","getFileForDocument","documentId","then","catch","getInlineContentOfDocument","text","Object","keys","map","fieldName","regex","RegExp","replace","error","process","Fragment","className","docBadge","summary","variant","docSummary","source","html","displayURL","sourceUrl","target","displayURLLink","color","button","disabled","onClick","done","response","fileName","contentDisposition","headers","indexOf","matches","exec","contentType","webkitURL","downloadUrl","aTag","location","setTimeout","downloadFile","id","defaultMessage","fileAvailability","propTypes","PropTypes","shape","isRequired","string","formatMessage","func","bool","injectIntl","withStyles","theme","root","paddingTop","spacing","paddingBottom","docTitle","fontWeight","fontSize","palette","grey","padding","background","primary","main","position","top","marginTop","getContrastText","paddingLeft","marginLeft","Sdk","React","Component","constructor","super","event","item","this","api_uuid","language","getSdkForApi","updatedList","state","sdkLanguages","filter","toLowerCase","search","value","setState","items","ev","src","app","context","match","params","apiUuid","filter_threshold","bind","handleClick","handleChange","addDefaultSrc","componentDidMount","Api","AuthManager","getUser","getSdkLanguages","obj","length","status","notFound","getSdk","sdkZipName","sdkZip","JSFileDownload","badRequest","serverError","render","languageList","onlyIcons","custom","apiDetailPages","onlyShowSdks","filteredLanguageList","lang","includes","index","xs","key","cursor","alt","String","width","height","margin","titleWrappper","titleSub","label","name","onChange","container","gridRoot","sm","md","lg","xl","justify","textAlign","toString","toUpperCase","title","cardTitle","onError","genericMessageWrapper","dialogContainer","component","instanceOf","alignItems","marginRight","withTheme","RenderMethodBase","method","chipColor","resourceChipColors","chipTextColor","console","log","Chip","backgroundColor","RenderMethod","Resources","paths","swagger","promisedApi","getSwaggerByAPIId","undefined","isAuthorize","qs","stringify","reference","pathname","history","push","contentWrapper","path","Typography","heading","innerKey","CONSTS","HTTP_METHODS","contextType","object","flexDirection","marginBottom","infoBar","sliderBackground","operationChipColor","Operations","operations","Table","TableRow","borderStyle","verb","TableCell","OverviewDocuments","docs","setDocs","setDocsCount","useHistory","truncateString","n","str","substr","getDocumentsByAPIId","list","count","Alert","Grid","emptyBox","List","aria-labelledby","subheader","ListSubheader","listItemStyle","listWrapper","ListItem","gotoDoc","ListItemIcon","Icon","ListItemText","secondary","maxWidth","contentAreaWidth","iconClass","boxBadge","A400","typography","h5","subscriptionBox","linkStyle","default","subscriptionTop","resourceWrapper","overflow","actionPanel","justifyContent","linkToTest","textDecoration","border","marging","ExpansionPanelSummary","borderBottom","minHeight","content","expanded","Overview","showCredentials","showComments","showTryout","showDocuments","showSdks","subscribedApplications","totalComments","setCount","totalDocuments","overviewDocOverride","setOverviewDocOverride","isOnlyMutualSSL","securityScheme","isOnlyBasicAuth","overviewDoc","otherTypeName","Paper","paper","titleIconColor","overview","titleIconSize","user","advertiseInfo","advertised","ExpansionPanel","defaultExpanded","CustomIcon","strokeColor","icon","lifeCycleStatus","ExpansionPanelDetails","noCredentialsRoot","expansionRoot","Box","mt","mr","to","isSubscriptionAvailable","pointerEvents","Button","size","mutualsslMessage","apiType","getTitleForAPIOperationType","apiObject","getResourcesForAPIs","Divider","ExpansionPanelActions","subheading","classNames","noCommentRoot","commentRoot","Comments","showLatest","isOverview","noDocumentRoot","muiName","verticalSpace","subsToApp","backgroundImage","overviewPage","commentsBackground","backgroundPosition","backgroundRepeat","backgroundSize","documentsBackground","credentialsBackground"],"mappings":"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","file":"APIOverview.bundle.js","sourcesContent":["module.exports = function(data, filename, mime, bom) {\n    var blobData = (typeof bom !== 'undefined') ? [bom, data] : [data]\n    var blob = new Blob(blobData, {type: mime || 'application/octet-stream'});\n    if (typeof window.navigator.msSaveBlob !== 'undefined') {\n        // IE workaround for \"HTML7007: One or more blob URLs were \n        // revoked by closing the blob for which they were created. \n        // These URLs will no longer resolve as the data backing \n        // the URL has been freed.\"\n        window.navigator.msSaveBlob(blob, filename);\n    }\n    else {\n        var blobURL = window.URL.createObjectURL(blob);\n        var tempLink = document.createElement('a');\n        tempLink.style.display = 'none';\n        tempLink.href = blobURL;\n        tempLink.setAttribute('download', filename); \n        \n        // Safari thinks _blank anchor are pop ups. We only want to set _blank\n        // target if the browser does not support the HTML5 download attribute.\n        // This allows you to download files in desktop safari if pop up blocking \n        // is enabled.\n        if (typeof tempLink.download === 'undefined') {\n            tempLink.setAttribute('target', '_blank');\n        }\n        \n        document.body.appendChild(tempLink);\n        tempLink.click();\n        document.body.removeChild(tempLink);\n        window.URL.revokeObjectURL(blobURL);\n    }\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Icon from '@material-ui/core/Icon';\nimport Button from '@material-ui/core/Button';\nimport ReactMarkdown from 'react-markdown';\nimport ReactSafeHtml from 'react-safe-html';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { ApiContext } from '../ApiContext';\nimport API from 'AppData/api';\nimport Alert from '../../../Shared/Alert';\n\nconst styles = theme => ({\n    root: {\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n    docTitle: {\n        fontWeight: 100,\n        fontSize: 50,\n        color: theme.palette.grey[500],\n    },\n    docBadge: {\n        padding: theme.spacing(1),\n        background: theme.palette.primary.main,\n        position: 'absolute',\n        top: 0,\n        marginTop: -22,\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n    button: {\n        padding: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n    displayURL: {\n        padding: theme.spacing(2),\n        marginTop: theme.spacing(2),\n        background: theme.palette.grey[200],\n        color: theme.palette.getContrastText(theme.palette.grey[200]),\n        display: 'flex',\n    },\n    displayURLLink: {\n        paddingLeft: theme.spacing(2),\n    },\n    docSummary: {\n        marginTop: theme.spacing(2),\n    },\n    fileAvailability: {\n        marginTop: theme.spacing(1),\n        marginLeft: theme.spacing(0.8),\n    }\n});\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction View(props) {\n    const {\n        classes, doc, apiId, fullScreen, intl,\n    } = props;\n    const { api } = useContext(ApiContext);\n    const [code, setCode] = useState('');\n    const [isFileAvailable,setIsFileAvailable] = useState(false);\n    const restAPI = new API();\n\n    useEffect(() => {\n        if (doc.sourceType === 'MARKDOWN' || doc.sourceType === 'INLINE') loadContentForDoc();\n        if (doc.sourceType === 'FILE') {\n            const promised_get_content = restAPI.getFileForDocument(apiId, doc.documentId);\n            promised_get_content\n                .then(() => {\n                    setIsFileAvailable(true);\n                })\n                .catch(() => {\n                    setIsFileAvailable(false);\n                });\n        } \n    }, [props.doc]);\n\n    const loadContentForDoc = () => {\n        const docPromise = restAPI.getInlineContentOfDocument(apiId, doc.documentId);\n        docPromise\n            .then((doc) => {\n                let text = doc.text;\n\n                Object.keys(api).map( fieldName => {\n                    let regex = new RegExp('\\_\\_\\_'+ fieldName +'\\_\\_\\_', 'g');\n                    text = text.replace(regex, api[fieldName]);\n                });\n                setCode(text);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n            });\n    };\n    /**\n     * Download the document related file\n     * @param {any} response Response of download file\n     */\n    const downloadFile = (response, doc) => {\n        let fileName = '';\n        const contentDisposition = response.headers['content-disposition'];\n\n        if (contentDisposition && contentDisposition.indexOf('attachment') !== -1) {\n            const fileNameReg = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n            const matches = fileNameReg.exec(contentDisposition);\n            if (matches != null && matches[1]) fileName = matches[1].replace(/['\"]/g, '');\n        }\n        const contentType = response.headers['content-type'];\n        const blob = new Blob([response.data], {\n            type: contentType,\n        });\n        if (typeof window.navigator.msSaveBlob !== 'undefined') {\n            window.navigator.msSaveBlob(blob, fileName);\n        } else {\n            const URL = window.URL || window.webkitURL;\n            const downloadUrl = URL.createObjectURL(blob);\n\n            if (fileName) {\n                const aTag = document.createElement('a');\n                if (typeof aTag.download === 'undefined') {\n                    window.location = downloadUrl;\n                } else {\n                    aTag.href = downloadUrl;\n                    aTag.download = fileName;\n                    document.body.appendChild(aTag);\n                    aTag.click();\n                }\n            } else {\n                window.location = downloadUrl;\n            }\n\n            setTimeout(() => {\n                URL.revokeObjectURL(downloadUrl);\n            }, 100);\n        }\n    };\n    const handleDownload = () => {\n        const promised_get_content = restAPI.getFileForDocument(apiId, doc.documentId);\n        promised_get_content\n            .then((done) => {\n                downloadFile(done, document);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.Documents.View.error.downloading',\n                        defaultMessage: 'Error downloading the file',\n                    }));\n                }\n            });\n    };\n    return (\n        <React.Fragment>\n            {!fullScreen && <div className={classes.docBadge}>{doc.type}</div>}\n\n            {doc.summary && (\n                <Typography variant='body1' className={classes.docSummary}>\n                    {doc.summary}\n                </Typography>\n            )}\n\n            {doc.sourceType === 'MARKDOWN' && <ReactMarkdown source={code} />}\n            {doc.sourceType === 'INLINE' && <ReactSafeHtml html={code} />}\n            {doc.sourceType === 'URL' && (\n                <a className={classes.displayURL} href={doc.sourceUrl} target='_blank'>\n                    {doc.sourceUrl}\n                    <Icon className={classes.displayURLLink}>open_in_new</Icon>\n                </a>\n            )}\n            {doc.sourceType === 'FILE' && (\n                <Button variant='contained' color='default' className={classes.button} \n                disabled={!isFileAvailable} onClick={handleDownload} >\n                    <FormattedMessage id='Apis.Details.Documents.View.btn.download' defaultMessage='Download' />\n\n                    <Icon>arrow_downward</Icon>\n                </Button>\n            )}\n            {doc.sourceType === 'FILE' && !isFileAvailable && (\n                <Typography className={classes.fileAvailability}>\n                    <FormattedMessage\n                        id='Apis.Details.Documents.View.file.availability'\n                        defaultMessage='No file available'\n                    />\n                </Typography>\n            )}\n        </React.Fragment>\n    );\n}\n\nView.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    doc: PropTypes.shape({}).isRequired,\n    apiId: PropTypes.string.isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n    fullScreen: PropTypes.bool.isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(View));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Icon from '@material-ui/core/Icon';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport JSFileDownload from 'js-file-download';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport { withStyles, withTheme } from '@material-ui/core/styles';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport AuthManager from 'AppData/AuthManager';\nimport { app } from 'Settings';\nimport Api from '../../../data/api';\n\nconst styles = theme => ({\n    genericMessageWrapper: {\n        margin: theme.spacing(2),\n    },\n    titleSub: {\n        marginLeft: theme.spacing(3),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n    gridRoot: {\n        marginLeft: theme.spacing(2),\n    },\n    titleWrappper: {\n        display: 'flex',\n        alignItems: 'center',\n        '& h4' : {\n            marginRight: theme.spacing(1),\n        },\n    },\n    cardTitle: {\n        background: theme.palette.grey[50],\n    },\n});\n\n/**\n *\n *\n * @class Sdk\n * @extends {React.Component}\n */\nclass Sdk extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sdkLanguages: null,\n            items: null,\n        };\n        const { match, apiId } = this.props;\n        this.api_uuid = match ? match.params.apiUuid : apiId;\n        this.filter_threshold = 5;\n        this.getSdkForApi = this.getSdkForApi.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.addDefaultSrc = this.addDefaultSrc.bind(this);\n    }\n\n    /**\n     *\n     *\n     * @memberof Sdk\n     */\n    componentDidMount() {\n        const api = new Api();\n        const user = AuthManager.getUser();\n        if (user != null) {\n            const promised_languages = api.getSdkLanguages();\n\n            promised_languages\n                .then((response) => {\n                    if (response.obj.length === 0) {\n                        this.setState({ sdkLanguages: false });\n                        return;\n                    }\n                    this.setState({ sdkLanguages: response.obj });\n                    this.setState({ items: response.obj });\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.log(error);\n                    }\n                    const status = error.status;\n                    if (status === 404) {\n                        this.setState({ notFound: true });\n                    }\n                });\n        }\n    }\n\n    /**\n     * Call the REST API to generate the SDK\n     *\n     * @param {*} apiId\n     * @param {*} language\n     * @memberof Sdk\n     */\n    getSdkForApi(apiId, language) {\n        const api = new Api();\n        const promised_sdk = api.getSdk(apiId, language);\n\n        promised_sdk\n            .then((response) => {\n                const sdkZipName = response.headers['content-disposition'].match(/filename=\"(.+)\"/)[1];\n                const sdkZip = response.data;\n                // Prompt to download zip file for the SDK\n                JSFileDownload(sdkZip, sdkZipName);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const status = error.status;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 400) {\n                    this.setState({ badRequest: true });\n                } else if (status === 500) {\n                    this.setState({ serverError: true });\n                }\n            });\n    }\n\n    /**\n     * Handle the click event of the download button\n     *\n     * @memberof Sdk\n     */\n    handleClick = (event, item) => {\n        const apiId = this.api_uuid;\n        const language = item;\n        this.getSdkForApi(apiId, language);\n    };\n\n    /**\n     * Handle the change event of the Search input field\n     *\n     * @memberof Sdk\n     */\n    handleChange = (event) => {\n        let updatedList = this.state.sdkLanguages;\n        updatedList = updatedList.filter((item) => {\n            return item.toLowerCase().search(event.target.value.toLowerCase()) !== -1;\n        });\n        this.setState({ items: updatedList });\n    };\n\n    /**\n     * Handle sdk image not found issue. Point to a default image\n     */\n    addDefaultSrc = (ev) => {\n        ev.target.src = app.context + '/site/public/images/sdks/default.svg';\n    };\n\n    /**\n     *\n     *\n     * @returns\n     * @memberof Sdk\n     */\n    render() {\n        const languageList = this.state.items;\n        const {\n            onlyIcons, intl, classes, theme,\n        } = this.props;\n        const {\n            custom: {\n                apiDetailPages: { onlyShowSdks },\n            },\n        } = theme;\n        const filteredLanguageList =\n        languageList && languageList.length > 0 && onlyShowSdks && onlyShowSdks.length > 0\n                ? languageList.filter(lang => onlyShowSdks.includes(lang.toLowerCase()))\n                : languageList;\n        if (onlyIcons) {\n            return (\n                filteredLanguageList && (\n                    <React.Fragment>\n                        {filteredLanguageList.map((language, index) =>\n                            index < 3 && (\n                                <Grid item xs={4} key={index}>\n                                    <a\n                                        onClick={event => this.handleClick(event, language)}\n                                        style={{ cursor: 'pointer' }}\n                                    >\n                                        <img\n                                            alt={language}\n                                            src={\n                                                app.context +\n                                                    '/site/public/images/sdks/' +\n                                                    new String(language) +\n                                                    '.svg'\n                                            }\n                                            style={{\n                                                width: 80,\n                                                height: 80,\n                                                margin: 10,\n                                            }}\n                                        />\n                                    </a>\n                                </Grid>\n                            ))}\n                    </React.Fragment>\n                )\n            );\n        }\n        return (\n            <React.Fragment>\n                <div className={classes.titleWrappper}>\n                    <Typography variant='h4' className={classes.titleSub}>\n                        <FormattedMessage id='Apis.Details.Sdk.title' defaultMessage='Software Development Kits (SDKs)' />\n                    </Typography>\n                    {filteredLanguageList && this.state.sdkLanguages.length >= this.filter_threshold && (\n                        <TextField\n                            variant=\"outlined\"\n                            id='search'\n                            label={intl.formatMessage({\n                                defaultMessage: 'Search SDK',\n                                id: 'Apis.Details.Sdk.search.sdk',\n                            })}\n                            type='text'\n                            margin='normal'\n                            name='searchSdk'\n                            onChange={this.handleChange}\n                        />\n                    )}\n                </div>\n                {filteredLanguageList ? (\n                    <Grid container className='tab-grid' spacing={0} className={classes.gridRoot}>\n                        <Grid item xs={12} sm={6} md={9} lg={9} xl={10}>\n                            <Grid container justify='flex-start' spacing={4}>\n                                {filteredLanguageList.map((language, index) => (\n                                    <Grid key={index} item key={index}>\n                                        <div style={{ width: 'auto', textAlign: 'center', margin: '10px' }}>\n                                            <Card>\n                                                <div>{language.toString().toUpperCase()}</div>\n                                                <Divider />\n                                                <CardMedia\n                                                    title={language.toString().toUpperCase()}\n                                                    src={\n                                                        '/devportal/site/public/images/sdks/' +\n                                                        new String(language) +\n                                                        '.svg'\n                                                    }\n                                                    classes={{root: classes.cardTitle}}\n                                                >\n                                                    <img\n                                                        alt={language}\n                                                        onError={this.addDefaultSrc}\n                                                        src={`/devportal/site/public/images/sdks/${language}.svg`}\n                                                        style={{ width: '100px', height: '100px', margin: '30px' }}\n                                                    />\n                                                </CardMedia>\n                                                <CardActions>\n                                                    <Grid container justify='center'>\n                                                        <Button\n                                                            color='secondary'\n                                                            onClick={event => this.handleClick(event, language)}\n                                                        >\n                                                            <Icon>arrow_downward</Icon>\n                                                            {'Download'}\n                                                        </Button>\n                                                    </Grid>\n                                                </CardActions>\n                                            </Card>\n                                        </div>\n                                    </Grid>\n                                ))}\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                ) : (\n                    <div className={classes.genericMessageWrapper}>\n                        <InlineMessage type='info' className={classes.dialogContainer}>\n                            <Typography variant='h5' component='h3'>\n                                <FormattedMessage id='Apis.Details.Sdk.no.sdks' defaultMessage='No SDKs' />\n                            </Typography>\n                            <Typography component='p'>\n                                <FormattedMessage\n                                    id='Apis.Details.Sdk.no.sdks.content'\n                                    defaultMessage='No SDKs available for this API'\n                                />\n                            </Typography>\n                        </InlineMessage>\n                    </div>\n                )}\n            </React.Fragment>\n        );\n    }\n}\n\nSdk.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(Sdk));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles, withTheme } from '@material-ui/core/styles';\n\nimport PropTypes from 'prop-types';\nimport Chip from '@material-ui/core/Chip';\nimport { injectIntl } from 'react-intl';\nimport CONSTS from 'AppData/Constants';\nimport Api from 'AppData/api';\nimport { ApiContext } from './ApiContext';\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction RenderMethodBase(props) {\n    const { theme, method } = props;\n    let chipColor = theme.custom.resourceChipColors ? theme.custom.resourceChipColors[method] : null;\n    let chipTextColor = '#000000';\n    if (!chipColor) {\n        console.log('Check the theme settings. The resourceChipColors is not populated properly');\n        chipColor = '#cccccc';\n    } else {\n        chipTextColor = theme.palette.getContrastText(theme.custom.resourceChipColors[method]);\n    }\n    return (<Chip\n        label={method.toUpperCase()}\n        style={{ \n            backgroundColor: chipColor,\n            color: chipTextColor,\n            height: 20,\n            margin: '5px',\n        }}\n    />);\n}\n\nRenderMethodBase.propTypes = {\n    theme: PropTypes.shape({}).isRequired,\n    method: PropTypes.string.isRequired,\n};\n\nconst RenderMethod = withTheme(RenderMethodBase);\n/**\n *\n *\n * @param {*} theme\n */\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: 10,\n    },\n    heading: {\n        marginRight: 20,\n        color: theme.palette.getContrastText(theme.custom.infoBar.sliderBackground),\n    },\n});\n/**\n *\n *\n * @class Resources\n * @extends {React.Component}\n */\nclass Resources extends React.Component {\n    /**\n     *Creates an instance of Resources.\n     * @param {*} props\n     * @memberof Resources\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            paths: null,\n            swagger: {},\n        };\n        this.api = new Api();\n    }\n\n    /**\n     *\n     *\n     * @memberof Resources\n     */\n    componentDidMount() {\n        const { api } = this.props;\n        let promisedApi = null;\n\n        const apiClient = new Api();\n        promisedApi = apiClient.getSwaggerByAPIId(api.id);\n\n        promisedApi\n            .then((response) => {\n                if (response.obj.paths !== undefined) {\n                    this.setState({ paths: response.obj.paths });\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const status = error.status;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 401) {\n                    this.setState({ isAuthorize: false });\n                    const params = qs.stringify({ reference: this.props.location.pathname });\n                    this.props.history.push({ pathname: '/login', search: params });\n                }\n            });\n    }\n\n    /**\n     *\n     *\n     * @returns\n     * @memberof Resources\n     */\n    render() {\n        const { paths } = this.state;\n        if (this.state.notFound) {\n            return <div>resource not found...</div>;\n        }\n        if (!paths) {\n            return <div>loading...</div>;\n        }\n        const { classes } = this.props;\n\n        return (\n            <div className={classes.root}>\n                <div className={classes.contentWrapper}>\n                    {Object.keys(paths).map((key) => {\n                        const path = paths[key];\n                        return (\n                            <div className={classes.root} key={key}>\n                                <Typography className={classes.heading} variant='body1'>\n                                    {key}\n                                </Typography>\n                                {Object.keys(path).map((innerKey) => {\n                                    return CONSTS.HTTP_METHODS.includes(innerKey) ? (\n                                        <RenderMethod method={innerKey} key={innerKey} />\n                                    ) : null;\n                                })}\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nResources.contextType = ApiContext;\n\nResources.propTypes = {\n    classes: PropTypes.object.isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(Resources));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles, withTheme } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport { injectIntl } from 'react-intl';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport PropTypes from 'prop-types';\nimport Chip from '@material-ui/core/Chip';\nimport Api from 'AppData/api';\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction RenderMethodBase(props) {\n    const { theme, method } = props;\n    let chipColor = theme.custom.operationChipColor\n        ? theme.custom.operationChipColor[method]\n        : null;\n    let chipTextColor = '#000000';\n    if (!chipColor) {\n        console.log('Check the theme settings. The resourceChipColors is not populated properlly');\n        chipColor = '#cccccc';\n    } else {\n        chipTextColor = theme.palette.getContrastText(theme.custom.operationChipColor[method]);\n    }\n    return <Chip label={method} style={{ backgroundColor: chipColor, color: chipTextColor, height: 20 }} />;\n}\n\nRenderMethodBase.propTypes = {\n    theme: PropTypes.object.isRequired,\n    method: PropTypes.object.isRequired,\n};\n\nconst RenderMethod = withTheme(RenderMethodBase);\n/**\n *\n *\n * @param {*} theme\n */\nconst styles = {\n    root: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: 10,\n    },\n    heading: {\n        marginRight: 20,\n    },\n};\n/**\n *\n *\n * @class Operations\n * @extends {React.Component}\n */\nclass Operations extends React.Component {\n    /**\n     *Creates an instance of Operations.\n     * @param {*} props\n     * @memberof Operations\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            operations: null,\n        };\n        this.api = new Api();\n    }\n\n    /**\n     *\n     *\n     * @memberof Operations\n     */\n    componentDidMount() {\n        const { api } = this.props;\n        this.setState({ operations: api.operations });\n    }\n\n    /**\n     *\n     *\n     * @returns\n     * @memberof Operations\n     */\n    render() {\n        const { operations } = this.state;\n        if (!operations) {\n            return <div>\n                <FormattedMessage\n                    id='Apis.Details.Operations.notFound'\n                    defaultMessage='Operations Not Found'\n                />\n            </div>;\n        }\n        const { classes } = this.props;\n\n        return (\n            <Table>\n                {operations && operations.length !== 0 && operations.map(item => (\n                    <TableRow style={{ borderStyle: 'hidden' }} key={item.target + '_' + item.verb}>\n                        <TableCell>\n                            <Typography className={classes.heading} component='p' variant='body1'>\n                                {item.target}\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            <RenderMethod method={item.verb.toLowerCase()} />\n                        </TableCell>\n                    </TableRow>\n                ))}\n            </Table>\n        );\n    }\n}\nOperations.propTypes = {\n    classes: PropTypes.object.isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n   \n};\n\nexport default injectIntl(withStyles(styles)(Operations));\n","/* eslint-disable react/prop-types */\n/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Icon from '@material-ui/core/Icon';\nimport { withStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport API from 'AppData/api';\n\n/**\n * Add two numbers.\n * @param {JSON} theme The second number.\n * @returns {JSON} The theme object.\n */\nconst styles = (theme) => ({\n    root: {\n        padding: theme.spacing(3),\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    iconClass: {\n        marginRight: 10,\n        color: theme.palette.secondary.main,\n    },\n    boxBadge: {\n        background: theme.palette.grey.A400,\n        color: theme.palette.getContrastText(theme.palette.grey.A400),\n        fontSize: theme.typography.h5.fontSize,\n        padding: theme.spacing(1),\n        width: 30,\n        height: 30,\n        marginRight: 20,\n        textAlign: 'center',\n    },\n    subscriptionBox: {\n        paddingLeft: theme.spacing(2),\n    },\n    linkStyle: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        fontSize: theme.typography.fontSize,\n    },\n    subscriptionTop: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    resourceWrapper: {\n        height: 192,\n        overflow: 'auto',\n    },\n    actionPanel: {\n        justifyContent: 'flex-start',\n    },\n    linkToTest: {\n        textDecoration: 'none',\n    },\n    emptyBox: {\n        background: '#ffffff55',\n        color: '#444',\n        border: 'solid 1px #fff',\n        padding: theme.spacing(2),\n        marginTop: 50,\n    },\n    listWrapper: {\n        padding: 0,\n        margin: 0,\n        width: '100%',\n    },\n    listItemStyle: {\n        padding: 0,\n        marging: 0,\n    },\n});\n\n/**\n * Add two numbers.\n * @param {number} props The second number.\n * @returns {JSX} jsx.\n */\nfunction OverviewDocuments(props) {\n    const [docs, setDocs] = useState([]);\n    const { apiId, setDocsCount } = props;\n    const history = useHistory();\n    const truncateString = (n, str) => {\n        return (str.length > n) ? str.substr(0, n - 1) + '...' : str;\n    };\n    useEffect(() => {\n        const restApi = new API();\n        const promisedApi = restApi.getDocumentsByAPIId(apiId);\n        promisedApi\n            .then((response) => {\n                if (response.obj.list.length > 0) {\n                    // Rearanging the response to group them by the sourceType property.\n                    setDocs(response.obj.list);\n                    setDocsCount(response.obj.count);\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    Alert.error('Error occured');\n                }\n            });\n    }, []);\n\n    const gotoDoc = (documentId) => {\n        history.push('/apis/' + apiId + '/documents/' + documentId);\n    };\n    /**\n     *\n     *\n     * @returns\n     * @memberof Overview\n     */\n\n    const { classes } = props;\n    if (docs.length === 0) {\n        return (\n            <Grid container className={classes.root} spacing={2}>\n                <Grid item xs={12}>\n                    <div className={classes.emptyBox}>\n                        <Typography variant='body2'>\n                            <FormattedMessage\n                                id='Apis.Details.Overview.documents.no.content'\n                                defaultMessage='No Documents Available'\n                            />\n                        </Typography>\n                    </div>\n                </Grid>\n            </Grid>\n        );\n    }\n\n    return (\n        docs.length > 0 && (\n            <List\n                component='nav'\n                aria-labelledby='nested-list-subheader'\n                subheader={(\n                    <ListSubheader component='div' id='nested-list-subheader' className={classes.listItemStyle}>\n                        <FormattedMessage\n                            id='Apis.Details.Overview.documents.list.title.prefix'\n                            defaultMessage='Showing '\n                        />\n                        {docs.length === 1 && (\n                            <>\n                                1\n                                <FormattedMessage\n                                    id='Apis.Details.Overview.documents.list.title.sufix.document'\n                                    defaultMessage=' Document'\n                                />\n                            </>\n                        )}\n                        {docs.length === 2 && (\n                            <>\n                                2\n                                <FormattedMessage\n                                    id='Apis.Details.Overview.documents.list.title.sufix.documents'\n                                    defaultMessage=' Documents'\n                                />\n                            </>\n                        )}\n                        {docs.length > 2 && (\n                            <>\n                                3\n                                <FormattedMessage\n                                    id='Apis.Details.Overview.documents.list.title.sufix.documents.multiple'\n                                    defaultMessage=' Documents out of '\n                                />\n                                {docs.length}\n                            </>\n                        )}\n                    </ListSubheader>\n                )}\n                className={classes.listWrapper}\n            >\n                {docs.map((doc, index) => (\n                    index <= 2\n                    && (\n                        <ListItem button onClick={() => gotoDoc(doc.documentId)} className={classes.listItemStyle} key={doc.name}>\n                            <ListItemIcon>\n                                <Icon>insert_drive_file</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={doc.name} secondary={truncateString(100, doc.summary)} />\n                        </ListItem>\n                    )\n                ))}\n            </List>\n        )\n    );\n}\n\nOverviewDocuments.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n};\n\nexport default withStyles(styles, { withTheme: true })(OverviewDocuments);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport MuiExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport { Link } from 'react-router-dom';\nimport Divider from '@material-ui/core/Divider';\nimport Paper from '@material-ui/core/Paper';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport Button from '@material-ui/core/Button';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { FormattedMessage } from 'react-intl';\nimport API from 'AppData/api';\nimport AuthManager from 'AppData/AuthManager';\nimport View from 'AppComponents/Apis/Details/Documents/View';\nimport CustomIcon from 'AppComponents/Shared/CustomIcon';\nimport Box from '@material-ui/core/Box';\nimport { app } from 'Settings';\nimport { ApiContext } from './ApiContext';\nimport Resources from './Resources';\nimport Operations from './Operations';\nimport Comments from './Comments/Comments';\nimport Sdk from './Sdk';\nimport OverviewDocuments from './OverviewDocuments';\n\n/**\n *\n *\n * @param {*} theme\n */\nconst styles = (theme) => ({\n    root: {\n        padding: theme.spacing(3),\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        margin: -1 * theme.spacing(0, 2),\n    },\n    iconClass: {\n        marginRight: 10,\n    },\n    boxBadge: {\n        background: theme.palette.grey.A400,\n        fontSize: theme.typography.h5.fontSize,\n        padding: theme.spacing(1),\n        width: 30,\n        height: 30,\n        marginRight: 20,\n        textAlign: 'center',\n    },\n    subscriptionBox: {\n        paddingLeft: theme.spacing(2),\n    },\n    linkStyle: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        fontSize: theme.typography.fontSize,\n    },\n    subscriptionTop: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    resourceWrapper: {\n        height: 192,\n        overflow: 'auto',\n    },\n    actionPanel: {\n        justifyContent: 'flex-start',\n    },\n    linkToTest: {\n        textDecoration: 'none',\n    },\n    button: {\n        textDecoration: 'none',\n    },\n    verticalSpace: {\n        marginLeft: theme.spacing(60),\n    },\n    subheading: {\n        marginLeft: theme.spacing(2),\n    },\n    marginTop: {\n        marginTop: theme.spacing(8),\n    },\n    subsToApp: {\n        marginTop: theme.spacing(2),\n    },\n    expansionRoot: {\n        minHeight: 238,\n    },\n    noCommentRoot: {\n        backgroundImage: `url(${app.context + theme.custom.overviewPage.commentsBackground})`,\n        height: '100%',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        minHeight: 192,\n    },\n    commentRoot: {\n        height: '100%',\n        minHeight: 192,\n    },\n    noDocumentRoot: {\n        backgroundImage: `url(${app.context + theme.custom.overviewPage.documentsBackground})`,\n        height: '100%',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        minHeight: 192,\n    },\n    noCredentialsRoot: {\n        backgroundImage: `url(${app.context + theme.custom.overviewPage.credentialsBackground})`,\n        height: '100%',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        minHeight: 236,\n    },\n    emptyBox: {\n        background: '#ffffff55',\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        border: 'solid 1px #fff',\n        padding: theme.spacing(2),\n    },\n    paper: {\n        margin: theme.spacing(2),\n        padding: theme.spacing(2),\n    },\n    heading: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    mutualsslMessage: {\n        marginTop: theme.spacing(2),\n    }\n});\nconst ExpansionPanelSummary = withStyles({\n    root: {\n        borderBottom: '1px solid rgba(0,0,0,.125)',\n        marginBottom: -1,\n        minHeight: 56,\n        '&$expanded': {\n            minHeight: 56,\n        },\n    },\n    content: {\n        '&$expanded': {\n            margin: '12px 0',\n        },\n        alignItems: 'center',\n    },\n    expanded: {},\n})((props) => <MuiExpansionPanelSummary {...props} />);\n\nExpansionPanelSummary.muiName = 'ExpansionPanelSummary';\n\n/**\n * Handles the Overview page for APIs and API Products.\n * @param {*} props properties passed by parent element\n * @memberof Overview\n */\nfunction Overview(props) {\n    const { classes, theme } = props;\n    const {\n        custom: {\n            apiDetailPages: {\n                showCredentials, showComments, showTryout, showDocuments, showSdks,\n            },\n        },\n    } = theme;\n    const { api, subscribedApplications } = useContext(ApiContext);\n    const [totalComments, setCount] = useState(0);\n    const [totalDocuments, setDocsCount] = useState(0);\n    const [overviewDocOverride, setOverviewDocOverride] = useState(null);\n    const isOnlyMutualSSL = api.securityScheme.includes('mutualssl') && !api.securityScheme.includes('oauth2') &&\n        !api.securityScheme.includes('api_key') && !api.securityScheme.includes('basic_auth');\n    const isOnlyBasicAuth = api.securityScheme.includes('basic_auth') && !api.securityScheme.includes('oauth2') &&\n        !api.securityScheme.includes('api_key');\n    useEffect(() => {\n        const restApi = new API();\n        const promisedApi = restApi.getDocumentsByAPIId(api.id);\n        promisedApi\n            .then((response) => {\n                const overviewDoc = response.body.list.filter((item) => item.otherTypeName === '_overview');\n                if (overviewDoc.length > 0) {\n                    // We can override the UI with this content\n                    setOverviewDocOverride(overviewDoc[0]); // Only one doc we can render\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    Alert.error('Error occured');\n                }\n            });\n    }, []);\n    const getResourcesForAPIs = (apiType, apiObject) => {\n        switch (apiType) {\n            case 'GRAPHQL':\n                return <Operations api={apiObject} />;\n            case 'WS':\n                return '';\n            default:\n                return <Resources api={apiObject} />;\n        }\n    };\n\n    const getTitleForAPIOperationType = (apiType) => {\n        switch (apiType) {\n            case 'GRAPHQL':\n                return <FormattedMessage id='Apis.Details.Overview.operations.title' defaultMessage='Operations' />;\n            default:\n                return <FormattedMessage id='Apis.Details.Overview.resources.title' defaultMessage='Resources' />;\n        }\n    };\n    if (overviewDocOverride) {\n        return (\n            <>\n                <Paper className={classes.paper}>\n                    <View doc={overviewDocOverride} apiId={api.id} fullScreen />\n                </Paper>\n            </>\n        );\n    }\n    const { titleIconColor } = theme.custom.overview;\n    const { titleIconSize } = theme.custom.overview;\n    const user = AuthManager.getUser();\n    return (\n        <Grid container className={classes.root} spacing={2}>\n            {!api.advertiseInfo.advertised && showCredentials && (\n                <Grid item xs={12} lg={6}>\n                    <ExpansionPanel defaultExpanded>\n                        <ExpansionPanelSummary>\n                            <CustomIcon\n                                strokeColor={titleIconColor}\n                                className={classes.iconClass}\n                                width={titleIconSize}\n                                height={titleIconSize}\n                                icon='credentials'\n                            />\n                            <Typography className={classes.heading} variant='h6'>\n                                <FormattedMessage\n                                    id='Apis.Details.Overview.api.subscriptions'\n                                    defaultMessage='Subscriptions'\n                                />\n                            </Typography>\n                        </ExpansionPanelSummary>\n                        {api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped' ? (\n                            <ExpansionPanelDetails\n                                classes={{\n                                    root: classes.noCredentialsRoot,\n                                }}\n                            >\n                                <Grid container className={classes.root} spacing={2}>\n                                    <Grid item xs={12} className={classes.marginTop}>\n                                        <div className={classes.emptyBox}>\n                                            <Typography variant='body2'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Overview.no.subscription.message'\n                                                    defaultMessage='Subscriptions Are Not Allowed'\n                                                />\n                                            </Typography>\n                                        </div>\n                                    </Grid>\n                                </Grid>\n                            </ExpansionPanelDetails>\n                        ) : (\n                                <ExpansionPanelDetails classes={{ root: classes.expansionRoot }}>\n                                    <Grid container className={classes.root} spacing={2}>\n                                        <Grid item xs={12}>\n                                            <Typography variant='subtitle2'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Overview.subscriptions.title'\n                                                    defaultMessage='Subscriptions'\n                                                />\n                                            </Typography>\n                                            <Typography variant='body2'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Overview.subscribe.info'\n                                                    defaultMessage={\n                                                        'Subscription enables you to receive access'\n                                                        + ' tokens and be authenticated to invoke this API.'\n                                                    }\n                                                />\n                                            </Typography>\n                                            <Box display='block' mt={2}>\n                                                <Grid item xs={12}>\n                                                    {user ? (\n                                                        <Box display='flex' flexDirection='column' mr={2}>\n                                                            <Link\n                                                                to={'/apis/' + api.id + '/credentials'}\n                                                                style={\n                                                                    !api.isSubscriptionAvailable ?\n                                                                        { pointerEvents: 'none' } : null\n                                                                }\n                                                            >\n                                                                <Button\n                                                                    variant='contained'\n                                                                    color='primary'\n                                                                    size='large'\n                                                                    disabled={!api.isSubscriptionAvailable || isOnlyMutualSSL ||\n                                                                         isOnlyBasicAuth }\n                                                                >\n                                                                    <FormattedMessage\n                                                                        id={'Apis.Details.Overview.subscribe' +\n                                                                            'btn.link'}\n                                                                        defaultMessage='Subscribe'\n                                                                    />\n                                                                </Button>\n                                                            </Link>\n                                                            {subscribedApplications && (<Typography variant='caption' component='div'>\n                                                                {subscribedApplications.length === 0 ? (<FormattedMessage\n                                                                    id='Apis.Details.Overview.subscribe.count.zero'\n                                                                    defaultMessage={\n                                                                        'No application subscriptions.'\n                                                                    }\n                                                                />): (\n                                                                    subscribedApplications.length    \n                                                                )}\n                                                                {(isOnlyMutualSSL || isOnlyBasicAuth) && (\n                                                                    <Grid className={classes.mutualsslMessage}>\n                                                                    <Typography variant='body2'>\n                                                                    <FormattedMessage\n                                                                        id='Apis.Details.Overview.mutualssl.basicauth'\n                                                                        defaultMessage={'Subscription is not required for Mutual SSL APIs' + \n                                                                        ' or APIs with only Basic Authentication.'}\n                                                                    />\n                                                                    </Typography>\n                                                                    </Grid>\n                                                                )}\n                                                                {' '}\n                                                                {subscribedApplications.length === 1 && (<>\n                                                                    <FormattedMessage\n                                                                        id='Apis.Details.Overview.subscribe.count.singular'\n                                                                        defaultMessage={\n                                                                            'Application subscribed.'\n                                                                        }\n                                                                    /></>)}\n                                                                {subscribedApplications.length > 1 && (<>\n                                                                     <FormattedMessage\n                                                                        id='Apis.Details.Overview.subscribe.count.plural'\n                                                                        defaultMessage={\n                                                                            'Applications subscribed.'\n                                                                        }\n                                                                    /></>)}\n                                                            </Typography>)}\n                                                        </Box>\n                                                    ) : (\n                                                            <Box display='inline' mr={2}>\n                                                                <a href={app.context + '/services/configs'}>\n                                                                    <Button\n                                                                        variant='contained'\n                                                                        color='primary'\n                                                                        size='large'\n                                                                        disabled={!api.isSubscriptionAvailable}\n                                                                    >\n                                                                        <FormattedMessage\n                                                                            id={'Apis.Details.Overview.signin' +\n                                                                                '.subscribe.btn.link'}\n                                                                            defaultMessage='Sign in to Subscribe'\n                                                                        />\n                                                                    </Button>\n                                                                </a>\n                                                            </Box>\n                                                        )}\n                                                </Grid>\n                                            </Box>\n                                        </Grid>\n\n                                    </Grid>\n                                </ExpansionPanelDetails>\n                            )}\n                    </ExpansionPanel>\n                </Grid>\n            )}\n            {api.type !== 'WS' && showTryout && (\n                <Grid item xs={12} lg={6}>\n                    <ExpansionPanel defaultExpanded>\n                        <ExpansionPanelSummary>\n                            <CustomIcon\n                                strokeColor={titleIconColor}\n                                className={classes.iconClass}\n                                width={titleIconSize}\n                                height={titleIconSize}\n                                icon='credentials'\n                            />\n                            <Typography className={classes.heading} variant='h6'>\n                                {getTitleForAPIOperationType(api.type)}\n                            </Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails className={classes.resourceWrapper}>\n                            {getResourcesForAPIs(api.type, api)}\n                        </ExpansionPanelDetails>\n                        {!api.advertiseInfo.advertised && (\n                            <>\n                                <Divider />\n                                <ExpansionPanelActions className={classes.actionPanel}>\n                                    <Link to={'/apis/' + api.id + '/test'} className={classes.linkToTest}>\n                                        <Button size='small' color='primary'>\n                                            <FormattedMessage\n                                                id='Apis.Details.Overview.resources.show.more'\n                                                defaultMessage='Test >>'\n                                            />\n                                        </Button>\n                                    </Link>\n                                </ExpansionPanelActions>\n                            </>\n                        )}\n                    </ExpansionPanel>\n                </Grid>\n            )}\n            {!api.advertiseInfo.advertised && (\n                <>\n                    {showComments && (\n                        <Grid item xs={12} lg={6}>\n                            <ExpansionPanel defaultExpanded>\n                                <ExpansionPanelSummary>\n                                    <CustomIcon\n                                        strokeColor={titleIconColor}\n                                        className={classes.iconClass}\n                                        width={titleIconSize}\n                                        height={titleIconSize}\n                                        icon='comments'\n                                    />\n                                    <Typography className={classes.heading} variant='h6'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Overview.comments.title'\n                                            defaultMessage='Comments'\n                                        />\n                                    </Typography>\n                                    <Typography className={classes.subheading}>\n                                        {' ' + (totalComments > 3 ? 3 : totalComments) + ' of ' + totalComments}\n                                    </Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails\n                                    classes={{\n                                        root: classNames(\n                                            { [classes.noCommentRoot]: totalComments === 0 },\n                                            { [classes.commentRoot]: totalComments !== 0 },\n                                        ),\n                                    }}\n                                >\n                                    <Grid container className={classes.root} spacing={2}>\n                                        {api && (\n                                            <Grid item xs={12}>\n                                                <Comments apiId={api.id} showLatest isOverview setCount={setCount} />\n                                            </Grid>\n                                        )}\n                                        {totalComments === 0 && (\n                                            <Grid item xs={12}>\n                                                <div className={classes.emptyBox}>\n                                                    <Typography variant='body2'>\n                                                        <FormattedMessage\n                                                            id='Apis.Details.Overview.comments.no.content'\n                                                            defaultMessage='No Comments Yet'\n                                                        />\n                                                    </Typography>\n                                                </div>\n                                            </Grid>\n                                        )}\n                                    </Grid>\n                                </ExpansionPanelDetails>\n                                <Divider />\n                                <ExpansionPanelActions className={classes.actionPanel}>\n                                    <Link to={'/apis/' + api.id + '/comments'} className={classes.button}>\n                                        <Button size='small' color='primary'>\n                                            <FormattedMessage\n                                                id='Apis.Details.Overview.comments.show.more'\n                                                defaultMessage='Show More >>'\n                                            />\n                                        </Button>\n                                    </Link>\n                                </ExpansionPanelActions>\n                            </ExpansionPanel>\n                        </Grid>\n                    )}\n                    {api.type !== 'WS' && showSdks && (\n                        <Grid item xs={6}>\n                            <ExpansionPanel defaultExpanded>\n                                <ExpansionPanelSummary>\n                                    <CustomIcon\n                                        strokeColor={titleIconColor}\n                                        className={classes.iconClass}\n                                        width={titleIconSize}\n                                        height={titleIconSize}\n                                        icon='sdk'\n                                    />\n                                    <Typography className={classes.heading} variant='h6'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Overview.sdk.generation.title'\n                                            defaultMessage='SDK Generation'\n                                        />\n                                    </Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails className={classes.resourceWrapper}>\n                                    <Grid container className={classes.root} spacing={2}>\n                                        {api && <Sdk apiId={api.id} onlyIcons />}\n                                        <Grid item xs={12}>\n                                            <Typography>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Overview.sdk.generation.description'\n                                                    defaultMessage={`If you want to create a software application\n                                                     to consume the subscribed APIs, you can generate client side\n                                                      SDK for a supported language/framework and use it as a start\n                                                       point to write the software application.`}\n                                                />\n                                            </Typography>\n                                        </Grid>\n                                    </Grid>\n                                </ExpansionPanelDetails>\n                                <Divider />\n                                <ExpansionPanelActions className={classes.actionPanel}>\n                                    <Link to={'/apis/' + api.id + '/sdk'} className={classes.linkToTest}>\n                                        <Button size='small' color='primary'>\n                                            <FormattedMessage\n                                                id='Apis.Details.Overview.sdk.generation.show.more'\n                                                defaultMessage='Show More >>'\n                                            />\n                                        </Button>\n                                    </Link>\n                                </ExpansionPanelActions>\n                            </ExpansionPanel>\n                        </Grid>\n                    )}\n                </>\n            )}\n            {showDocuments && (\n                <Grid item xs={12} lg={6}>\n                    <ExpansionPanel defaultExpanded>\n                        <ExpansionPanelSummary>\n                            <CustomIcon\n                                strokeColor={titleIconColor}\n                                className={classes.iconClass}\n                                width={titleIconSize}\n                                height={titleIconSize}\n                                icon='docs'\n                            />\n\n                            <Typography className={classes.heading} variant='h6'>\n                                <FormattedMessage\n                                    id='Apis.Details.Overview.documents.title'\n                                    defaultMessage='Documents'\n                                />\n                            </Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails\n                            classes={{ root: classNames({ [classes.noDocumentRoot]: totalDocuments === 0 }) }}\n                        >\n                            <OverviewDocuments apiId={api.id} setDocsCount={setDocsCount} />\n                        </ExpansionPanelDetails>\n                        <Divider />\n                        <ExpansionPanelActions className={classes.actionPanel}>\n                            <Link to={'/apis/' + api.id + '/documents'} className={classes.button}>\n                                <Button size='small' color='primary'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Overview.comments.show.more'\n                                        defaultMessage='Show More >>'\n                                    />\n                                </Button>\n                            </Link>\n                        </ExpansionPanelActions>\n                    </ExpansionPanel>\n                </Grid>\n            )}\n        </Grid>\n    );\n}\n\nOverview.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    theme: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default withStyles(styles, { withTheme: true })(Overview);\n"],"sourceRoot":""}