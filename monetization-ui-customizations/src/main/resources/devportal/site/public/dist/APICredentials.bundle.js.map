{"version":3,"sources":["webpack:///./source/src/app/components/Shared/GenericDisplayDialog.jsx","webpack:///./override/CustomComponents/MonetizationIcons.jsx","webpack:///./source/src/app/components/Apis/Details/Credentials/SubscriptionTableRow.jsx","webpack:///./source/src/app/components/Apis/Details/Credentials/Credentials.jsx"],"names":["genericDisplayDialog","props","classes","handleClick","heading","caption","buttonText","className","appContent","type","dialogContainer","variant","component","resourcePath","resourcePaths","APPLICATIONS","resourceMethod","resourceMethods","POST","color","button","onClick","MonetizationIcons","strokeColor","undefined","width","height","icon","xmlns","viewBox","d","fill","id","transform","strokeLinecap","cx","cy","r","strokeWidth","strokeLinejoin","stroke","subscriptionTableRow","loadInfo","handleSubscriptionDelete","theme","selectedAppId","updateSubscriptionData","selectedKeyType","app","index","applicationOwner","hashEnabled","isMonetizationEnabled","handleRetry","style","backgroundColor","td","label","policy","status","actionColumn","to","value","defaultMessage","CustomIcon","palette","primary","main","subscriptionId","onKeyDown","ScopeValidation","SINGLE_SUBSCRIPTION","DELETE","classNames","activeLink","colSpan","selectedWrapper","TokenManager","keyType","selectedApp","appId","owner","propTypes","PropTypes","shape","isRequired","func","string","number","withStyles","padding","spacing","getContrastText","background","default","display","alignItems","fontSize","cursor","paddingLeft","textAlign","direction","borderBottom","grey","A200","borderLeft","withTheme","Credentials","React","Component","expanded","subscriptionRequest","applicationId","apiId","throttlingPolicy","throttlingPolicyList","isSubscripbing","api","applicationsAvailable","this","context","state","newSubscriptionRequest","tiers","tierName","setState","apiType","intl","Api","subscribe","then","response","redirectionParams","JSON","parse","body","stripe","Stripe","additionalParameters","stripePublishableKey","error","redirectToCheckout","sessionId","console","log","Alert","formatMessage","info","updateData","catch","Subscription","deleteSubscription","history","push","Application","get","result","componentDidMount","render","subscribedApplications","user","AuthManager","getUser","isOnlyMutualSSL","securityScheme","includes","isOnlyBasicAuth","Grid","container","item","md","lg","Typography","handleExpandClick","titleSub","length","isSubscriptionAvailable","pointerEvents","addLinkWrapper","Button","buttonElm","disabled","size","Icon","Paper","elevation","paper","descWrapper","lifeCycleStatus","toLowerCase","InlineMessage","GenericDisplayDialog","goToWizard","generateCredentialWrapper","SUBSCRIPTIONS","credentialBoxWrapper","credentialBox","SubscribeToApi","updateSubscriptionRequest","renderSmall","handleSubscribe","CircularProgress","tableMain","th","map","SubscriptionTableRow","key","monetization","enabled","renderCredentialInfo","ApiContext","contentWrapper","injectIntl","maxWidth","custom","contentAreaWidth","paddingTop","marginLeft","paddingBottom","borderCollapse","marginTop","marginRight","borderTop","expansion","boxShadow","summary","subscribeRoot","A100","appBar","toolbar","subscribeTitle","flex","marginBottom","border","borderRadius"],"mappings":"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","file":"APICredentials.bundle.js","sourcesContent":["/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\n\nconst genericDisplayDialog = (props) => {\n    const {\n        classes, handleClick, heading, caption, buttonText,\n    } = props;\n    return (\n        <div className={classes.appContent}>\n            <InlineMessage type='info' className={classes.dialogContainer}>\n                <Typography variant='h5' component='h3'>\n                    {heading}\n                </Typography>\n                <Typography component='p'>\n                    {caption}\n                </Typography>\n                <ScopeValidation resourcePath={resourcePaths.APPLICATIONS} resourceMethod={resourceMethods.POST}>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className={classes.button}\n                        onClick={handleClick}\n                    >\n                        {buttonText}\n                    </Button>\n                </ScopeValidation>\n            </InlineMessage>\n        </div>\n    );\n};\n\nexport default genericDisplayDialog;\n","import React from 'react';\n\nconst MonetizationIcons = (props) => {\n    const strokeColor = props.strokeColor !== undefined ? props.strokeColor : '#8b8e95';\n    const width = props.width !== undefined ? props.width : 32;\n    const height = props.height !== undefined ? props.height : 32;\n    const icon = props.icon !== undefined ? props.icon : 'api';\n    const className = props.className !== undefined ? props.className : '';\n    if (icon === 'retry') {\n        return (\n            <svg\n                xmlns='http://www.w3.org/2000/svg'\n                width={width}\n                height={height}\n                viewBox='0 0 15 15'\n                className={className}\n            >\n                <path\n                    d='M9 13.5c-2.49 0-4.5-2.01-4.5-4.5S6.51 4.5 9 4.5c1.24 0 2.36.52 3.17 1.33L10 8h5V3l-1.76 1.76C12.15 3.68 10.66 3 9 3 5.69 3 3.01 5.69 3.01 9S5.69 15 9 15c2.97 0 5.43-2.16 5.9-5h-1.52c-.46 2-2.24 3.5-4.38 3.5z'\n                    fill={strokeColor}\n                />\n            </svg>\n        );\n    } else {\n        return (\n            <svg\n                xmlns='http://www.w3.org/2000/svg'\n                width={width}\n                height={height}\n                viewBox='0 0 8.428752 8.6233671'\n                id='svg8'\n                className={className}\n            >\n                <g id='layer2' transform='translate(105.022 -106.571)'>\n                    <g transform='matrix(.84802 0 0 .87176 -110.085 63.188)' id='g5876' strokeLinecap='round'>\n                        <circle\n                            id='circle5869'\n                            cx='8.138'\n                            cy='57.583'\n                            r='1.497'\n                            fill={strokeColor}\n                            strokeWidth='0.529'\n                            strokeLinejoin='round'\n                        />\n                        <path\n                            d='m 6.6416492,53.373914 c 2.7091648,-0.363432 5.5994938,2.122181 5.7062048,5.612659'\n                            id='path5872'\n                            fill='none'\n                            stroke={strokeColor}\n                            strokeWidth='1.323'\n                        />\n                        <path\n                            id='path5874'\n                            d='m 6.7351935,50.47404 c 5.1370835,-0.52388 7.9751195,3.245055 8.5125345,8.512533'\n                            fill='none'\n                            stroke={strokeColor}\n                            strokeWidth='1.323'\n                        />\n                    </g>\n                </g>\n            </svg>\n        );\n    }\n};\n\nexport default MonetizationIcons;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\nimport CustomIcon from 'AppComponents/Shared/CustomIcon';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport TokenManager from 'AppComponents/Shared/AppsAndKeys/TokenManager';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n// === Start @monetization custom addition ===\nimport MonetizationIcon from '/Users/dushansilva/projects-wso2/wso2-monetization/monetization-ui-customizations/src/main/resources/devportal/override//CustomComponents/MonetizationIcons';\n// === End @monetization custom addition ===\n/**\n * @inheritdoc\n * @param {*} theme theme object\n */\nconst styles = (theme) => ({\n    button: {\n        padding: theme.spacing(1),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: '11px',\n        cursor: 'pointer',\n        '& span': {\n            paddingLeft: 6,\n            display: 'inline-block',\n        },\n    },\n    actionColumn: {\n        display: 'flex',\n        textAlign: 'right',\n        direction: 'rtl',\n    },\n    td: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n        fontSize: '11px',\n        paddingLeft: theme.spacing(1),\n        height: 35,\n    },\n    selectedWrapper: {\n        background: theme.palette.grey[100],\n        borderLeft: 'solid 2px ' + theme.palette.primary.main,\n    },\n});\n\nconst subscriptionTableRow = (props) => {\n    const {\n        classes, loadInfo, handleSubscriptionDelete,\n        theme, selectedAppId, updateSubscriptionData, selectedKeyType, app, index, applicationOwner, hashEnabled,\n        isMonetizationEnabled, handleRetry,\n    } = props;\n    return (\n        <>\n            <tr style={{ backgroundColor: index % 2 ? '' : '#ffffff' }}>\n                <td className={classes.td}>{app.label}</td>\n                <td className={classes.td}>{app.policy}</td>\n                <td className={classes.td}>{app.status}</td>\n                <td className={classes.td}>\n                    <div className={classes.actionColumn}>\n                        <Link\n                            className={classes.button}\n                            to={'/applications/' + app.value}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.manage.app'\n                                    defaultMessage='MANAGE APP'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='applications'\n                            />\n                        </Link>\n                        {// === Start @monetization custom addition ===\n                            (isMonetizationEnabled && app.status === 'ON_HOLD') && (\n                                <a\n                                    className={classes.button}\n                                    onClick={() => handleRetry(\n                                        app.subscriptionId,\n                                        app.value,\n                                        app.policy,\n                                    )}\n                                    onKeyDown={() => handleRetry(\n                                        app.subscriptionId,\n                                        app.value,\n                                        app.policy,\n                                    )}\n                                >\n                                    <span>\n                                        <FormattedMessage\n                                            id='Apis.Details.Credentials.SubscriptionTableRow.retry'\n                                            defaultMessage='RETRY'\n                                        />\n                                    </span>\n                                    <MonetizationIcon\n                                        width={16}\n                                        height={16}\n                                        strokeColor={theme.palette.primary.main}\n                                        icon='retry'\n                                    />\n                                </a>\n                            )\n                            // === End @monetization custom addition ===\n                        }\n                        <ScopeValidation\n                            resourcePath={resourcePaths.SINGLE_SUBSCRIPTION}\n                            resourceMethod={resourceMethods.DELETE}\n                        >\n                            <a\n                                className={classes.button}\n                                onClick={() => handleSubscriptionDelete(\n                                    app.subscriptionId,\n                                    updateSubscriptionData,\n                                )}\n                                onKeyDown={() => handleSubscriptionDelete(\n                                    app.subscriptionId,\n                                    updateSubscriptionData,\n                                )}\n                            >\n                                <span>\n                                    <FormattedMessage\n                                        id='Apis.Details.Credentials.SubscriptionTableRow.unsubscribe'\n                                        defaultMessage='UNSUBSCRIBE'\n                                    />\n                                </span>\n                                <CustomIcon\n                                    width={16}\n                                    height={16}\n                                    strokeColor={theme.palette.primary.main}\n                                    icon='subscriptions'\n                                />\n                            </a>\n                        </ScopeValidation>\n                        <a\n                            className={classNames(classes.button, {\n                                [classes.activeLink]: selectedAppId\n                                && selectedKeyType === 'PRODUCTION'\n                                && app.value === selectedAppId,\n                            })}\n                            onClick={() => loadInfo('PRODUCTION', app.value)}\n                            onKeyDown={() => loadInfo('PRODUCTION', app.value)}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.prod.keys'\n                                    defaultMessage='PROD KEYS'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='productionkeys'\n                            />\n                        </a>\n                        <a\n                            className={classNames(classes.button, {\n                                [classes.activeLink]: selectedAppId\n                                && selectedKeyType === 'SANDBOX'\n                                && app.value === selectedAppId,\n                            })}\n                            onClick={() => loadInfo('SANDBOX', app.value)}\n                            onKeyDown={() => loadInfo('SANDBOX', app.value)}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.sandbox.keys'\n                                    defaultMessage='SANDBOX KEYS'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='productionkeys'\n                            />\n                        </a>\n                    </div>\n                </td>\n            </tr>\n            {app.value === selectedAppId && (selectedKeyType === 'PRODUCTION' || selectedKeyType === 'SANDBOX') && (\n                <tr>\n                    <td colSpan='4'>\n                        <div className={classes.selectedWrapper}>\n                            <TokenManager\n                                keyType={selectedKeyType}\n                                selectedApp={{\n                                    appId: app.value,\n                                    label: app.label,\n                                    owner: applicationOwner,\n                                    hashEnabled,\n                                }}\n                                updateSubscriptionData={updateSubscriptionData}\n                            />\n                        </div>\n                    </td>\n                </tr>\n            )}\n        </>\n    );\n};\nsubscriptionTableRow.propTypes = {\n    classes: PropTypes.shape({\n        td: PropTypes.shape({}),\n        actionColumn: PropTypes.shape({}),\n        button: PropTypes.shape({}),\n        activeLink: PropTypes.shape({}),\n        selectedWrapper: PropTypes.shape({}),\n    }).isRequired,\n    theme: PropTypes.shape({\n\n    }).isRequired,\n    handleSubscriptionDelete: PropTypes.func.isRequired,\n    loadInfo: PropTypes.func.isRequired,\n    selectedAppId: PropTypes.string.isRequired,\n    updateSubscriptionData: PropTypes.func.isRequired,\n    selectedKeyType: PropTypes.string.isRequired,\n    applicationOwner: PropTypes.string.isRequired,\n    app: PropTypes.shape({\n        label: PropTypes.string,\n        policy: PropTypes.string,\n        status: PropTypes.string,\n        value: PropTypes.string,\n        subscriptionId: PropTypes.string,\n    }).isRequired,\n    index: PropTypes.number.isRequired,\n};\nexport default withStyles(styles, { withTheme: true })(subscriptionTableRow);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Subscription from 'AppData/Subscription';\nimport GenericDisplayDialog from 'AppComponents/Shared/GenericDisplayDialog';\nimport Api from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Icon from '@material-ui/core/Icon';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Application from 'AppData/Application';\nimport AuthManager from 'AppData/AuthManager';\nimport SubscribeToApi from 'AppComponents/Shared/AppsAndKeys/SubscribeToApi';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { ApiContext } from '../ApiContext';\nimport SubscriptionTableRow from './SubscriptionTableRow';\n// === Start @monetization custom addition ===\n// === End @monetization custom addition ===\n\n/**\n * @inheritdoc\n * @param {*} theme theme object\n */\nconst styles = (theme) => ({\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n        paddingLeft: theme.spacing(3),\n        paddingTop: theme.spacing(3),\n    },\n    titleSub: {\n        marginLeft: theme.spacing(3),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n    generateCredentialWrapper: {\n        marginLeft: 0,\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n    tableMain: {\n        width: '100%',\n        borderCollapse: 'collapse',\n        marginTop: theme.spacing(3),\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(1),\n\n    },\n    th: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n        borderTop: 'solid 1px ' + theme.palette.grey.A200,\n        textAlign: 'left',\n        fontSize: '11px',\n        paddingLeft: theme.spacing(1),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n    },\n    expansion: {\n        background: 'transparent',\n        boxShadow: 'none',\n    },\n    summary: {\n        alignItems: 'center',\n    },\n    subscribeRoot: {\n        paddingLeft: theme.spacing(2),\n    },\n    activeLink: {\n        background: theme.palette.grey.A100,\n    },\n    appBar: {\n        background: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    toolbar: {\n        marginLeft: theme.spacing(2),\n    },\n    subscribeTitle: {\n        flex: 1,\n    },\n    paper: {\n        marginLeft: theme.spacing(3),\n        padding: theme.spacing(2),\n    },\n    descWrapper: {\n        marginBottom: theme.spacing(2),\n    },\n    credentialBoxWrapper: {\n        paddingLeft: theme.spacing(2),\n    },\n    credentialBox: {\n        padding: theme.spacing(1),\n        border: 'solid 1px #ccc',\n        borderRadius: 5,\n        marginBottom: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n    addLinkWrapper: {\n        marginLeft: theme.spacing(2),\n    },\n});\n\n/**\n * @class Credentials\n * @extends {React.Component}\n */\nclass Credentials extends React.Component {\n    static contextType = ApiContext;\n\n    state = {\n        expanded: true,\n        selectedAppId: false,\n        selectedKeyType: false,\n        subscriptionRequest: {\n            applicationId: '',\n            apiId: '',\n            throttlingPolicy: '',\n        },\n        throttlingPolicyList: [],\n        applicationOwner: '',\n        hashEnabled: false,\n        // === Start @monetization custom addition ===\n        isSubscripbing: false,\n        // === end @monetization custom addition ===\n    };\n\n    /**\n     *  Set the initial values for subscription request\n     */\n    componentDidMount() {\n        const { api, updateSubscriptionData } = this.context;\n        if (api) {\n            this.updateData();\n        } else {\n            updateSubscriptionData(this.updateData);\n        }\n    }\n\n    updateData = () => {\n        const { api, applicationsAvailable } = this.context;\n        const { subscriptionRequest } = this.state;\n        const newSubscriptionRequest = { ...subscriptionRequest, apiId: api.id };\n        const throttlingPolicyList = api.tiers;\n        if (throttlingPolicyList && throttlingPolicyList[0]) {\n            newSubscriptionRequest.throttlingPolicy = throttlingPolicyList[0].tierName;\n        }\n        if (applicationsAvailable && applicationsAvailable[0]) {\n            newSubscriptionRequest.applicationId = applicationsAvailable[0].value;\n        }\n        this.setState({ subscriptionRequest: newSubscriptionRequest, throttlingPolicyList });\n    };\n\n    /**\n     * @memberof Credentials\n     */\n    handleExpandClick = () => {\n        this.setState((state) => ({ expanded: !state.expanded }));\n    };\n\n    /**\n     * @param {*} updateSubscriptionData method to update global subscription data\n     * @memberof Credentials\n     */\n    handleSubscribe = () => {\n        const { updateSubscriptionData, apiType } = this.context;\n        const { subscriptionRequest } = this.state;\n        const { intl } = this.props;\n        // === Start @monetization custom addition ===\n        this.setState({ isSubscripbing: true });\n        // === End @monetization custom addition ===\n        const api = new Api();\n        api.subscribe(\n            subscriptionRequest.apiId,\n            subscriptionRequest.applicationId,\n            subscriptionRequest.throttlingPolicy,\n            apiType,\n        )\n            .then((response) => {\n                const redirectionParams = JSON.parse(response.body.redirectionParams);\n                // === Start @monetization custom addition ===\n                if (redirectionParams) {\n                    const stripe = Stripe(redirectionParams.additionalParameters.stripePublishableKey);\n                    const { error } = stripe.redirectToCheckout({\n                        sessionId: redirectionParams.additionalParameters.sessionId,\n                    });\n                    if (error) {\n                        console.log('Error while creating redirect.');\n                        console.error(error);\n                        // === Start @monetization custom addition ===\n                        Alert.error(intl.formatMessage({\n                            defaultMessage: 'Failed to retry subscription',\n                            id: 'monetization.CustomComponent.CheckoutSucessPage.subscription.failed',\n                        }));\n                        // === End @monetization custom addition ===\n                    }\n                }\n                // === End @monetization custom addition ===\n                if (response.body.status === 'ON_HOLD') {\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Your subscription request has been submitted and is now awaiting approval.',\n                        id: 'subscription.pending',\n                    }));\n                } else {\n                    console.log('Subscription created successfully with ID : ' + response.body.subscriptionId);\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Subscribed successfully',\n                        id: 'Apis.Details.Credentials.Credentials.subscribed.successfully',\n                    }));\n                }\n                this.setState({ isSubscripbing: false });\n                if (updateSubscriptionData) updateSubscriptionData(this.updateData);\n            })\n            .catch((error) => {\n                this.setState({ isSubscripbing: false });\n                console.log('Error while creating the subscription.');\n                console.error(error);\n            });\n    };\n\n    // === Start @monetization custom addition ===\n    handleRetry = (subscriptionId, applicationId, policy) => {\n        const { intl } = this.props;\n        const { api, apiType } = this.context;\n        const client = new Subscription();\n        const promisedDelete = client.deleteSubscription(subscriptionId);\n        promisedDelete.then(() => {\n            const apiObject = new Api();\n            return apiObject.subscribe(\n                api.id,\n                applicationId,\n                policy,\n                apiType,\n            )\n                .then((response) => {\n                    console.log(response);\n                    const redirectionParams = JSON.parse(response.body.redirectionParams);\n                    if (redirectionParams) {\n                        const stripe = Stripe(redirectionParams.additionalParameters.stripePublishableKey);\n                        const { error } = stripe.redirectToCheckout({\n                            sessionId: redirectionParams.additionalParameters.sessionId,\n                        });\n                        if (error) {\n                            console.log('Error while creating redirect.');\n                            console.error(error);\n                        }\n                    }\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'You will now be redirected to complete payment',\n                        id: 'Apis.Details.Credentials.Credentials.redirected.complete.payment',\n                    }));\n                });\n        }).catch((error) => {\n            console.log('Error while retrying the subscription.');\n            console.error(error);\n            Alert.error(intl.formatMessage({\n                defaultMessage: 'Failed to retry subscription',\n                id: 'monetization.CustomComponent.CheckoutSucessPage.subscription.failed',\n            }));\n        });\n    }\n    // === End @monetization custom addition ===\n\n    /**\n     * @inheritdoc\n     * @memberof Credentials\n     */\n    goToWizard = () => {\n        const { history } = this.props;\n        history.push('credentials/wizard');\n    };\n\n    /**\n     * used to load the token manager component when\n     * key type is selected in the applicaiton list\n     * @param {*} selectedKeyType key type\n     * @param {*} selectedAppId  application id\n     * @memberof Credentials\n     */\n    loadInfo = (selectedKeyType, selectedAppId) => {\n        this.setState({ selectedKeyType, selectedAppId });\n\n        Application.get(selectedAppId)\n            .then((result) => {\n                this.setState({ applicationOwner: result.owner, hashEnabled: result.hashEnabled });\n            });\n    };\n\n    /**\n     * Update subscription Request state\n     * @param {Object} subscriptionRequest parameters requried for subscription\n     */\n    updateSubscriptionRequest = (subscriptionRequest) => {\n        this.setState({ subscriptionRequest });\n    };\n\n    /**\n     *\n     * @param {*} subscriptionId subscription id\n     * @param {*} updateSubscriptionData method to update global subscription data\n     * @memberof Subscriptions\n     */\n    handleSubscriptionDelete = (subscriptionId, updateSubscriptionData) => {\n        const { intl } = this.props;\n        const client = new Subscription();\n        const promisedDelete = client.deleteSubscription(subscriptionId);\n        promisedDelete.then((response) => {\n            if (response.status !== 200) {\n                console.log(response);\n                Alert.info(intl.formatMessage({\n                    defaultMessage: 'Something went wrong while deleting the Subscription!',\n                    id: 'Apis.Details.Credentials.Credentials.something.went.wrong.with.subscription',\n                }));\n                return;\n            }\n            Alert.info(intl.formatMessage({\n                defaultMessage: 'Subscription deleted successfully!',\n                id: 'Apis.Details.Credentials.Credentials.subscription.deleted.successfully',\n            }));\n            if (updateSubscriptionData) updateSubscriptionData();\n        });\n    };\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const { classes, intl } = this.props;\n        const {\n            api, updateSubscriptionData, applicationsAvailable, subscribedApplications,\n        } = this.context;\n        const {\n            selectedKeyType,\n            selectedAppId,\n            subscriptionRequest,\n            throttlingPolicyList,\n            applicationOwner,\n            hashEnabled,\n            isSubscripbing,\n        } = this.state;\n        const user = AuthManager.getUser();\n        const isOnlyMutualSSL = api.securityScheme.includes('mutualssl') && !api.securityScheme.includes('oauth2')\n            && !api.securityScheme.includes('api_key') && !api.securityScheme.includes('basic_auth');\n        const isOnlyBasicAuth = api.securityScheme.includes('basic_auth') && !api.securityScheme.includes('oauth2')\n            && !api.securityScheme.includes('api_key');\n        const renderCredentialInfo = () => {\n            const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n            if (isPrototypedAPI) {\n                return (\n                    <>\n                        <InlineMessage type='info' className={classes.dialogContainer}>\n                            <Typography component='p'>\n                                <FormattedMessage\n                                    id={'Apis.Details.Credentials.Credentials.you.do.not.need'\n                                    + '.credentials.to.access.prototyped.api'}\n                                    defaultMessage='You do not need credentials to access Prototyped APIs'\n                                />\n                            </Typography>\n                        </InlineMessage>\n                    </>\n                );\n            } else if (isOnlyMutualSSL || isOnlyBasicAuth) {\n                return (\n                    <InlineMessage type='info' className={classes.dialogContainer}>\n                        <Typography component='p'>\n                            <FormattedMessage\n                                id='Apis.Details.Creadentials.credetials.mutualssl'\n                                defaultMessage={'Subscription is not required for Mutual SSL APIs'\n                                + ' or APIs with only Basic Authentication.'}\n                            />\n                        </Typography>\n                    </InlineMessage>\n                );\n            } else if (applicationsAvailable.length === 0 && subscribedApplications.length === 0) {\n                return (\n                    <GenericDisplayDialog\n                        classes={classes}\n                        handleClick={this.goToWizard}\n                        heading={user ? intl.formatMessage({\n                                defaultMessage: 'Subscribe',\n                                id: 'Apis.Details.Credentials.Credentials.subscribe.to.application',\n                            })\n                            : intl.formatMessage({\n                                defaultMessage: 'Sign In to Subscribe',\n                                id: 'Apis.Details.Credentials.Credentials.subscribe.to.application.sign.in',\n                            })}\n                        caption={intl.formatMessage({\n                            defaultMessage: 'You need to subscribe to an application to access this API',\n                            id:\n                                'Apis.Details.Credentials.Credentials.subscribe.to.application.msg',\n                        })}\n                        buttonText={intl.formatMessage({\n                            defaultMessage: 'Subscribe',\n                            id: 'Apis.Details.Credentials.Credentials.generate',\n                        })}\n                    />\n                );\n            } else {\n                return (\n                    <>\n                        <div className={classes.generateCredentialWrapper}>\n                            <ScopeValidation\n                                resourcePath={resourcePaths.SUBSCRIPTIONS}\n                                resourceMethod={resourceMethods.POST}\n                            >\n                                <Typography variant='h5'>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'subscribe.to.application'}\n                                        defaultMessage='Subscribe'\n                                    />\n                                </Typography>\n                                <div className={classes.credentialBoxWrapper}>\n                                    {applicationsAvailable.length === 0 && (\n                                        <div className={classes.credentialBox}>\n                                            <Typography variant='body2'>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.with.wizard.message'}\n                                                    defaultMessage={\n                                                        'Use the Subscription and Key Generation Wizard. '\n                                                        + 'Create a new application -> '\n                                                        + 'Subscribe -> Generate keys and '\n                                                        + 'Access Token to invoke this API.'\n                                                    }\n                                                />\n                                            </Typography>\n                                            <Link\n                                                to={(isOnlyMutualSSL || isOnlyBasicAuth) ? null\n                                                    : `/apis/${api.id}/credentials/wizard`}\n                                                style={!api.isSubscriptionAvailable\n                                                    ? { pointerEvents: 'none' } : null}\n                                            >\n                                                <Button\n                                                    variant='contained'\n                                                    color='primary'\n                                                    className={classes.buttonElm}\n                                                    disabled={!api.isSubscriptionAvailable || isOnlyMutualSSL\n                                                    || isOnlyBasicAuth}\n                                                >\n                                                    <FormattedMessage\n                                                        id={'Apis.Details.Credentials.'\n                                                        + 'SubscibeButtonPanel.subscribe.wizard.with.new.app'}\n                                                        defaultMessage='Subscription &amp; Key Generation Wizard'\n                                                    />\n                                                </Button>\n                                            </Link>\n                                        </div>\n                                    ) }\n                                    {applicationsAvailable.length > 0 && (\n                                        <div className={classes.credentialBox}>\n                                            <Typography variant='body2'>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials'\n                                                    + '.api.credentials.with.subscribe.message'}\n                                                    defaultMessage={'Subscribe to an application'\n                                                    + ' and generate credentials'}\n                                                />\n                                            </Typography>\n                                            <SubscribeToApi\n                                                applicationsAvailable={applicationsAvailable}\n                                                subscriptionRequest={subscriptionRequest}\n                                                throttlingPolicyList={throttlingPolicyList}\n                                                updateSubscriptionRequest={\n                                                    this.updateSubscriptionRequest\n                                                }\n                                                renderSmall\n                                            />\n                                            <Button\n                                                variant='contained'\n                                                color='primary'\n                                                className={classes.buttonElm}\n                                                onClick={() => this.handleSubscribe()}\n                                                // === Start @monetization custom addition ===\n                                                disabled={!api.isSubscriptionAvailable || isSubscripbing}\n                                            >\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.'\n                                                    + 'SubscibeButtonPanel.subscribe.btn'}\n                                                    defaultMessage='Subscribe'\n                                                />\n                                                {// === Start @monetization custom addition ===\n                                                    isSubscripbing && <CircularProgress size={24} />\n                                                    // === End @monetization custom addition ===\n                                                }\n                                            </Button>\n                                        </div>\n                                    )}\n                                </div>\n                            </ScopeValidation>\n                        </div>\n                        {/*\n                                    ****************************\n                                    Subscription List\n                                    ***************************\n                                    */}\n                        {subscribedApplications && subscribedApplications.length > 0 && (\n                            <>\n                                <Typography variant='h5'>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'api.credentials.subscribed.apps.title'}\n                                        defaultMessage='Subscriptions'\n                                    />\n                                </Typography>\n                                <Typography variant='body2'>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'api.credentials.subscribed.apps.description'}\n                                        defaultMessage='( Applications Subscribed to this Api )'\n                                    />\n                                </Typography>\n                                <table className={classes.tableMain}>\n                                    <tr>\n                                        <th className={classes.th}>\n                                            <FormattedMessage\n                                                id={'Apis.Details.Credentials.Credentials.'\n                                                + 'api.credentials.subscribed.apps.name'}\n                                                defaultMessage='Application Name'\n                                            />\n                                        </th>\n                                        <th className={classes.th}>\n                                            <FormattedMessage\n                                                id={'Apis.Details.Credentials.Credentials.api.'\n                                                + 'credentials.subscribed.apps.tier'}\n                                                defaultMessage='Throttling Tier'\n                                            />\n                                        </th>\n                                        <th className={classes.th}>\n                                            <FormattedMessage\n                                                id={'Apis.Details.Credentials.Credentials.'\n                                                + 'api.credentials.subscribed.apps.status'}\n                                                defaultMessage='Application Status'\n                                            />\n                                        </th>\n                                        <th className={classes.th} />\n                                    </tr>\n                                    {subscribedApplications.map((app, index) => (\n                                        <SubscriptionTableRow\n                                            key={index}\n                                            loadInfo={this.loadInfo}\n                                            handleSubscriptionDelete={this.handleSubscriptionDelete}\n                                            selectedAppId={selectedAppId}\n                                            updateSubscriptionData={updateSubscriptionData}\n                                            selectedKeyType={selectedKeyType}\n                                            app={app}\n                                            index={index}\n                                            applicationOwner={applicationOwner}\n                                            hashEnabled={hashEnabled}\n                                            // === Start @monetization custom addition ===\n                                            isMonetizationEnabled={api.monetization.enabled}\n                                            handleRetry={this.handleRetry}\n                                            // === End @monetization custom addition ===\n                                        />\n                                    ))}\n                                </table>\n                            </>\n                        )}\n                    </>\n                );\n            }\n        };\n        return (\n            <Grid container>\n                <Grid item md={12} lg={11}>\n                    <Grid container spacing={5}>\n                        <Grid item md={12}>\n                            <Typography onClick={this.handleExpandClick} variant='h4' className={classes.titleSub}>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.Credentials.api.credentials'\n                                    defaultMessage='Subscriptions'\n                                />\n                                {applicationsAvailable.length > 0 && (\n                                    <Link\n                                        to={(isOnlyMutualSSL || isOnlyBasicAuth) ? null\n                                            : `/apis/${api.id}/credentials/wizard`}\n                                        style={!api.isSubscriptionAvailable\n                                            ? { pointerEvents: 'none' } : null}\n                                        className={classes.addLinkWrapper}\n                                    >\n                                        <Button\n                                            color='secondary'\n                                            className={classes.buttonElm}\n                                            disabled={!api.isSubscriptionAvailable || isOnlyMutualSSL\n                                            || isOnlyBasicAuth}\n                                            size='small'\n                                        >\n                                            <Icon>add_circle_outline</Icon>\n                                            <FormattedMessage\n                                                id={'Apis.Details.Credentials.'\n                                                + 'SubscibeButtonPanel.subscribe.wizard.with.new.app'}\n                                                defaultMessage='Subscription &amp; Key Generation Wizard'\n                                            />\n                                        </Button>\n                                    </Link>\n                                )}\n                            </Typography>\n                            <Paper elevation={0} className={classes.paper}>\n                                <Typography variant='body2' className={classes.descWrapper}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Credentials.Credentials.'\n                                        defaultMessage={`An application \n                                        is primarily used to decouple the consumer from the APIs. It allows you to \n                                        generate and use a single key for multiple APIs and subscribe multiple times to \n                                        a single API with different SLA levels.`}\n                                    />\n                                </Typography>\n                                {renderCredentialInfo()}\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nCredentials.propTypes = {\n    classes: PropTypes.shape({\n        contentWrapper: PropTypes.string,\n        titleSub: PropTypes.string,\n        tableMain: PropTypes.string,\n        th: PropTypes.string,\n        paper: PropTypes.string,\n        descWrapper: PropTypes.string,\n        generateCredentialWrapper: PropTypes.string,\n        credentialBoxWrapper: PropTypes.string,\n        credentialBox: PropTypes.string,\n        buttonElm: PropTypes.string,\n        dialogContainer: PropTypes.string,\n    }).isRequired,\n    history: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(Credentials));\n"],"sourceRoot":""}