{"version":3,"sources":["webpack:///./source/src/app/components/Apis/Details/ApiConsole/SelectAppPanel.jsx","webpack:///./source/src/app/components/Apis/Details/ApiConsole/SwaggerUI.jsx","webpack:///./source/src/app/components/Apis/Details/ApiConsole/ApiConsole.jsx"],"names":["SelectAppPanel","props","subscriptions","handleChanges","selectedApplication","selectedKeyType","Fragment","display","justifyContent","xs","md","fullWidth","id","select","label","defaultMessage","value","name","onChange","SelectProps","helperText","margin","variant","map","sub","applicationInfo","applicationId","key","ml","find","status","disableAuthorizeAndInfoPlugin","wrapComponents","info","authorizeBtn","SwaggerUI","spec","accessTokenProvider","authorizationHeader","api","securitySchemeType","componentProps","validatorUrl","defaultModelsExpandDepth","docExpansion","requestInterceptor","req","url","context","patternToCheck","headers","endsWith","substring","length","includes","splitTokens","split","defaultModelExpandDepth","plugins","propTypes","PropTypes","func","isRequired","string","shape","ApiConsole","React","Component","constructor","super","this","state","showToken","username","password","bind","handleClickShowToken","updateSwagger","updateAccessToken","updateApplication","componentDidMount","apiID","user","AuthManager","getUser","apiData","environments","labels","selectedEnvironment","swagger","accessToken","apiClient","Api","getAPIById","then","apiResponse","obj","endpointURLs","endpoint","environmentName","getSwaggerByAPIIdAndEnvironment","getSwaggerByAPIIdAndLabel","getSwaggerByAPIId","swaggerResponse","getSubscriptions","subscriptionsResponse","list","filter","item","Application","get","application","getKeys","appKeys","token","setState","keys","catch","error","notFound","btoa","event","target","promiseSwagger","promiseApp","keyType","render","classes","downloadSwagger","JSON","stringify","downloadLink","encodeURIComponent","Progress","isApiKeyEnabled","isBasicAuthEnabled","isOAuthEnabled","prefix","securityScheme","isPrototypedAPI","lifeCycleStatus","toLowerCase","Typography","className","titleSub","Paper","paper","Grid","container","grid","userNotificationPaper","component","Icon","Box","gutterBottom","TextField","MenuItem","disabled","env","x","tokenType","usernameField","passwordField","sdefaultMessage","type","InputProps","endAdornment","InputAdornment","position","IconButton","edge","aria-label","onClick","startAdornment","inputAdornmentStart","centerItems","FormControl","RadioGroup","row","FormControlLabel","control","Radio","href","download","Button","size","buttonIcon","contextType","ApiContext","withStyles","theme","marginRight","minWidth","spacing","padding","marginTop","marginBottom","paddingRight","marginLeft","paddingTop","paddingBottom","width"],"mappings":"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","file":"APIConsole.bundle.js","sourcesContent":["import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@material-ui/core/Grid';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\n\nconst SelectAppPanel = (props) => {\n    const {\n        subscriptions, handleChanges, selectedApplication, selectedKeyType,\n    } = props;\n    return (\n        <React.Fragment>\n            <Box display='flex' justifyContent='center'>\n\n                <Grid xs={12} md={3} >\n                    <Box >\n                        <TextField\n                            fullWidth\n                            id='outlined-select-currency'\n                            select\n                            label={<FormattedMessage\n                                defaultMessage='Appplications'\n                                id='Apis.Details.ApiConsole.SelectAppPanel.applications'\n                            />}\n                            value={selectedApplication}\n                            name='selectedApplication'\n                            onChange={handleChanges}\n                            SelectProps={subscriptions}\n                            helperText={<FormattedMessage\n                                defaultMessage='Please select an application'\n                                id='Apis.Details.ApiConsole.SelectAppPanel.select.an.application'\n                            />}\n                            margin='normal'\n                            variant='outlined'\n                        >\n                            {subscriptions.map(sub => (\n                                <MenuItem value={sub.applicationInfo.applicationId} key={sub.applicationInfo.applicationId}>\n                                    {sub.applicationInfo.name}\n                                </MenuItem>\n                            ))}\n                        </TextField>\n                    </Box>\n                </Grid>\n                <Grid xs={12} md={3} >\n                    <Box ml={2}>\n                        <TextField\n                            fullWidth\n                            id='outlined-select-currency'\n                            select\n                            label={<FormattedMessage\n                                defaultMessage='Key Type'\n                                id='Apis.Details.ApiConsole.SelectAppPanel.key.type'\n                            />}\n                            value={selectedKeyType}\n                            name='selectedKeyType'\n                            onChange={handleChanges}\n                            helperText={<FormattedMessage\n                                defaultMessage='Please select a key type'\n                                id='Apis.Details.ApiConsole.SelectAppPanel.select.key.type'\n                            />}\n                            margin='normal'\n                            variant='outlined'\n                        >\n                            {(subscriptions != null && subscriptions.find(sub => sub.applicationId === selectedApplication).status === 'UNBLOCKED') &&\n                            <MenuItem value='PRODUCTION'>\n                                <FormattedMessage\n                                    id='Apis.Details.ApiConsole.SelectAppPanel.production'\n                                    defaultMessage='PRODUCTION'\n                                />\n                            </MenuItem>\n                            }\n                            <MenuItem value='SANDBOX'>\n                                <FormattedMessage\n                                    id='Apis.Details.ApiConsole.SelectAppPanel.sandbox'\n                                    defaultMessage='SANDBOX'\n                                />\n                            </MenuItem>\n                        </TextField>\n                    </Box>\n                </Grid>\n            </Box>\n\n        </React.Fragment>\n    );\n};\n\nexport default SelectAppPanel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport 'swagger-ui-react/swagger-ui.css';\nimport SwaggerUILib from 'swagger-ui-react';\n\nconst disableAuthorizeAndInfoPlugin = function () {\n    return {\n        wrapComponents: {\n            info: () => () => null,\n            authorizeBtn: () => () => null,\n        },\n    };\n};\n/**\n *\n * @class SwaggerUI\n * @extends {Component}\n */\nconst SwaggerUI = (props) => {\n    const {\n        spec, accessTokenProvider, authorizationHeader, api, securitySchemeType,\n    } = props;\n\n    const componentProps = {\n        spec,\n        validatorUrl: null,\n        defaultModelsExpandDepth: -1,\n        docExpansion: 'list',\n        requestInterceptor: (req) => {\n            const { url } = req;\n            const { context } = api;\n            const patternToCheck = `${context}/*`;\n            if (authorizationHeader === 'apikey') {\n                req.headers[authorizationHeader] = accessTokenProvider();\n            } else if (securitySchemeType === 'BASIC') {\n                req.headers[authorizationHeader] = 'Basic ' + accessTokenProvider();\n            } else {\n                req.headers[authorizationHeader] = 'Bearer ' + accessTokenProvider();\n            }\n            if (url.endsWith(patternToCheck)) {\n                req.url = url.substring(0, url.length - 2);\n            } else if (url.includes(patternToCheck + '?')) { // Check for query parameters.\n                const splitTokens = url.split('/*?');\n                req.url = splitTokens.length > 1 ? splitTokens[0] + '?' + splitTokens[1] : splitTokens[0];\n            }\n            return req;\n        },\n        defaultModelExpandDepth: -1,\n        plugins: [disableAuthorizeAndInfoPlugin],\n    };\n    return <SwaggerUILib {...componentProps} />;\n};\n\nSwaggerUI.propTypes = {\n    accessTokenProvider: PropTypes.func.isRequired,\n    authorizationHeader: PropTypes.string.isRequired,\n    api: PropTypes.shape({\n        context: PropTypes.string.isRequired,\n    }).isRequired,\n    spec: PropTypes.string.isRequired,\n};\nexport default SwaggerUI;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport {\n    Radio, RadioGroup, FormControlLabel, FormControl,\n} from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Icon from '@material-ui/core/Icon';\nimport AuthManager from 'AppData/AuthManager';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport CloudDownloadRounded from '@material-ui/icons/CloudDownloadRounded';\nimport Box from '@material-ui/core/Box';\nimport { ApiContext } from '../ApiContext';\nimport Progress from '../../../Shared/Progress';\nimport Api from '../../../../data/api';\nimport SwaggerUI from './SwaggerUI';\nimport Application from '../../../../data/Application';\nimport SelectAppPanel from './SelectAppPanel';\n/**\n * @inheritdoc\n * @param {*} theme theme\n */\nconst styles = (theme) => ({\n    buttonIcon: {\n        marginRight: 10,\n    },\n    centerItems: {\n        margin: 'auto',\n    },\n    tokenType: {\n        margin: 'auto',\n        display: 'flex',\n    },\n    inputAdornmentStart: {\n        minWidth: theme.spacing(18),\n    },\n    paper: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n    grid: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(4),\n        paddingRight: theme.spacing(2),\n        justifyContent: 'center',\n    },\n    userNotificationPaper: {\n        padding: theme.spacing(2),\n    },\n    titleSub: {\n        marginLeft: theme.spacing(2),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n    usernameField: {\n        width: '100%',\n    },\n    passwordField: {\n        width: '100%',\n        marginLeft: theme.spacing(1),\n    },\n});\n/**\n *\n *\n * @class ApiConsole\n * @extends {React.Component}\n */\nclass ApiConsole extends React.Component {\n    /**\n     *Creates an instance of ApiConsole.\n     * @param {*} props properties\n     * @memberof ApiConsole\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            showToken: false,\n            securitySchemeType: 'OAUTH',\n            username: '',\n            password: '',\n        };\n        this.handleChanges = this.handleChanges.bind(this);\n        this.accessTokenProvider = this.accessTokenProvider.bind(this);\n        this.handleClickShowToken = this.handleClickShowToken.bind(this);\n        this.updateSwagger = this.updateSwagger.bind(this);\n        this.updateAccessToken = this.updateAccessToken.bind(this);\n        this.updateApplication = this.updateApplication.bind(this);\n    }\n\n    /**\n     * @memberof ApiConsole\n     */\n    componentDidMount() {\n        const { api } = this.context;\n        const apiID = api.id;\n        const user = AuthManager.getUser();\n        let apiData;\n        let environments;\n        let labels;\n        let selectedEnvironment;\n        let swagger;\n        let subscriptions;\n        let selectedApplication;\n        let keys;\n        let selectedKeyType = 'PRODUCTION';\n        let accessToken;\n\n        this.apiClient = new Api();\n        const promiseAPI = this.apiClient.getAPIById(apiID);\n\n        promiseAPI\n            .then((apiResponse) => {\n                apiData = apiResponse.obj;\n                if (apiData.endpointURLs) {\n                    environments = apiData.endpointURLs.map((endpoint) => { return endpoint.environmentName; });\n                }\n                if (apiData.labels) {\n                    labels = apiData.labels.map((label) => { return label.name; });\n                }\n                if (environments && environments.length > 0) {\n                    [selectedEnvironment] = environments;\n                    return this.apiClient.getSwaggerByAPIIdAndEnvironment(apiID, selectedEnvironment);\n                } else if (labels && labels.length > 0) {\n                    [selectedEnvironment] = labels;\n                    return this.apiClient.getSwaggerByAPIIdAndLabel(apiID, selectedEnvironment);\n                } else {\n                    return this.apiClient.getSwaggerByAPIId(apiID);\n                }\n            })\n            .then((swaggerResponse) => {\n                swagger = swaggerResponse.obj;\n                if (user != null) {\n                    return this.apiClient.getSubscriptions(apiID);\n                } else {\n                    return null;\n                }\n            })\n            .then((subscriptionsResponse) => {\n                if (subscriptionsResponse != null) {\n                    subscriptions = subscriptionsResponse.obj.list.filter((item) => item.status === 'UNBLOCKED'\n                    || item.status === 'PROD_ONLY_BLOCKED');\n\n                    if (subscriptions && subscriptions.length > 0) {\n                        selectedApplication = subscriptions[0].applicationId;\n                        const promiseApp = Application.get(selectedApplication);\n\n                        promiseApp\n                            .then((application) => {\n                                return application.getKeys();\n                            })\n                            .then((appKeys) => {\n                                if (appKeys.get('SANDBOX')) {\n                                    selectedKeyType = 'SANDBOX';\n                                    ({ accessToken } = appKeys.get('SANDBOX').token);\n                                } else if (appKeys.get('PRODUCTION')) {\n                                    selectedKeyType = 'PRODUCTION';\n                                    ({ accessToken } = appKeys.get('PRODUCTION').token);\n                                }\n\n                                this.setState({\n                                    api: apiData,\n                                    swagger,\n                                    subscriptions,\n                                    environments,\n                                    labels,\n                                    selectedEnvironment,\n                                    selectedApplication,\n                                    keys: appKeys,\n                                    selectedKeyType,\n                                    accessToken,\n                                });\n                            });\n                    } else {\n                        this.setState({\n                            api: apiData,\n                            swagger,\n                            subscriptions,\n                            environments,\n                            labels,\n                            selectedEnvironment,\n                            selectedApplication,\n                            keys,\n                            selectedKeyType,\n                            accessToken,\n                        });\n                    }\n                } else {\n                    this.setState({\n                        api: apiData,\n                        swagger,\n                        subscriptions,\n                        environments,\n                        labels,\n                        selectedEnvironment,\n                        selectedApplication,\n                        keys,\n                        selectedKeyType,\n                        accessToken,\n                    });\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    }\n\n    /**\n     *\n     * Handle onClick of shown access token\n     * @memberof ApiConsole\n     */\n    handleClickShowToken() {\n        const { showToken } = this.state;\n        this.setState({ showToken: !showToken });\n    }\n\n    /**\n     *\n     * Provids the access token to the Swagger UI\n     * @returns {*} access token\n     * @memberof ApiConsole\n     */\n    accessTokenProvider() {\n        const {\n            accessToken, securitySchemeType, username, password,\n        } = this.state;\n        if (securitySchemeType === 'BASIC') {\n            const credentials = username + ':' + password;\n            return btoa(credentials);\n        }\n        return accessToken;\n    }\n\n    /**\n     * Handle onChange of inputs\n     * @param {*} event event\n     * @memberof ApiConsole\n     */\n    handleChanges(event) {\n        const { target } = event;\n        const { name, value } = target;\n        switch (name) {\n            case 'selectedEnvironment':\n                this.setState({ [name]: value }, this.updateSwagger);\n                break;\n            case 'selectedApplication':\n                this.setState({ [name]: value }, this.updateApplication);\n                break;\n            case 'selectedKeyType':\n                this.setState({ [name]: value }, this.updateAccessToken);\n                break;\n            case 'securityScheme':\n                this.setState({ securitySchemeType: value });\n                break;\n            case 'username':\n                this.setState({ username: value });\n                break;\n            case 'password':\n                this.setState({ password: value });\n                break;\n            default:\n                this.setState({ [name]: value });\n        }\n    }\n\n    /**\n     * Load the swagger file of the selected environemnt\n     * @memberof ApiConsole\n     */\n    updateSwagger() {\n        const {\n            selectedEnvironment, api, environments,\n        } = this.state;\n        let promiseSwagger;\n\n        if (selectedEnvironment) {\n            if (environments.includes(selectedEnvironment)) {\n                promiseSwagger = this.apiClient.getSwaggerByAPIIdAndEnvironment(api.id, selectedEnvironment);\n            } else {\n                promiseSwagger = this.apiClient.getSwaggerByAPIIdAndLabel(api.id, selectedEnvironment);\n            }\n        } else {\n            promiseSwagger = this.apiClient.getSwaggerByAPIId(api.id);\n        }\n        promiseSwagger.then((swaggerResponse) => {\n            this.setState({ swagger: swaggerResponse.obj });\n        });\n    }\n\n    /**\n     * Load the access token for given key type\n     * @memberof ApiConsole\n     */\n    updateAccessToken() {\n        const { keys, selectedKeyType } = this.state;\n        let accessToken;\n        if (keys.get(selectedKeyType)) {\n            ({ accessToken } = keys.get(selectedKeyType).token);\n        }\n        this.setState({ accessToken });\n    }\n\n    /**\n     * Load the selected application information\n     * @memberof ApiConsole\n     */\n    updateApplication() {\n        const { selectedApplication, selectedKeyType, subscriptions } = this.state;\n        const promiseApp = Application.get(selectedApplication);\n        let accessToken;\n        let keyType;\n\n        if (subscriptions != null && subscriptions.find((sub) => sub.applicationId\n            === selectedApplication).status === 'PROD_ONLY_BLOCKED') {\n            this.setState({ selectedKeyType: 'SANDBOX' });\n            keyType = 'SANDBOX';\n        } else {\n            keyType = selectedKeyType;\n        }\n\n        promiseApp\n            .then((application) => {\n                return application.getKeys();\n            })\n            .then((appKeys) => {\n                if (appKeys.get(keyType)) {\n                    ({ accessToken } = appKeys.get(keyType).token);\n                }\n                this.setState({ accessToken, keys: appKeys });\n            });\n    }\n\n    /**\n     * @inheritdoc\n     * @memberof ApiConsole\n     */\n    render() {\n        const { classes } = this.props;\n        const {\n            api, notFound, swagger, accessToken, showToken, subscriptions, selectedApplication, selectedKeyType,\n            selectedEnvironment, environments, labels, securitySchemeType, username, password,\n        } = this.state;\n        const user = AuthManager.getUser();\n        const downloadSwagger = JSON.stringify({ ...swagger });\n        const downloadLink = 'data:text/json;charset=utf-8, ' + encodeURIComponent(downloadSwagger);\n        const fileName = 'swagger.json';\n\n        if (api == null || swagger == null) {\n            return <Progress />;\n        }\n        if (notFound) {\n            return 'API Not found !';\n        }\n        let isApiKeyEnabled = false;\n        let isBasicAuthEnabled = false;\n        let isOAuthEnabled = false;\n        let authorizationHeader = api.authorizationHeader ? api.authorizationHeader : 'Authorization';\n        let prefix = 'Bearer';\n        if (api && api.securityScheme) {\n            isApiKeyEnabled = api.securityScheme.includes('api_key');\n            isBasicAuthEnabled = api.securityScheme.includes('basic_auth');\n            isOAuthEnabled = api.securityScheme.includes('oauth2');\n            if (isApiKeyEnabled && securitySchemeType === 'API-KEY') {\n                authorizationHeader = 'apikey';\n                prefix = '';\n            }\n        }\n        const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n\n        return (\n            <>\n                <Typography variant='h4' className={classes.titleSub}>\n                    <FormattedMessage id='Apis.Details.ApiConsole.ApiConsole.title' defaultMessage='Try Out' />\n                </Typography>\n                <Paper className={classes.paper}>\n                    <Grid container className={classes.grid}>\n                        {!isPrototypedAPI && !user && (\n                            <Grid item md={6}>\n                                <Paper className={classes.userNotificationPaper}>\n                                    <Typography variant='h5' component='h3'>\n                                        <Icon>warning</Icon>\n                                        {' '}\n                                        <FormattedMessage id='notice' defaultMessage='Notice' />\n                                    </Typography>\n                                    <Typography component='p'>\n                                        <FormattedMessage\n                                            id='api.console.require.access.token'\n                                            defaultMessage={'You need an access token to try the API. Please log '\n                                            + 'in and subscribe to the API to generate an access token. If you already '\n                                            + 'have an access token, please provide it below.'}\n                                        />\n                                    </Typography>\n                                </Paper>\n                            </Grid>\n                        )}\n                        {!isPrototypedAPI\n                        && (\n                            <Grid xs={12} md={12} item>\n                                <Box display='block'>\n                                    {user && subscriptions && subscriptions.length > 0 && (\n                                        <SelectAppPanel\n                                            subscriptions={subscriptions}\n                                            handleChanges={this.handleChanges}\n                                            selectedApplication={selectedApplication}\n                                            selectedKeyType={selectedKeyType}\n                                        />\n                                    )}\n                                    {subscriptions && subscriptions.length === 0 && (\n                                        <Box display='flex' justifyContent='center'>\n                                            <Typography variant='body1' gutterBottom>\n                                                <FormattedMessage\n                                                    id='Apis.Details.ApiConsole.ApiConsole.subscribe.to.application'\n                                                    defaultMessage='Please subscribe to an application'\n                                                />\n                                            </Typography>\n                                        </Box>\n\n                                    )}\n                                    <Box display='flex' justifyContent='center'>\n                                        <Grid xs={12} md={6} item>\n                                            {((environments && environments.length > 0)\n                                            || (labels && labels.length > 0))\n                                        && (\n                                            <TextField\n                                                fullWidth\n                                                select\n                                                label={(\n                                                    <FormattedMessage\n                                                        defaultMessage='Environment'\n                                                        id='Apis.Details.ApiConsole.environment'\n                                                    />\n                                                )}\n                                                value={selectedEnvironment}\n                                                name='selectedEnvironment'\n                                                onChange={this.handleChanges}\n                                                helperText={(\n                                                    <FormattedMessage\n                                                        defaultMessage='Please select an environment'\n                                                        id='Apis.Details.ApiConsole.SelectAppPanel.select.environment'\n                                                    />\n                                                )}\n                                                margin='normal'\n                                                variant='outlined'\n                                            >\n                                                {environments && environments.length > 0 && (\n                                                    <MenuItem value='' disabled>\n                                                        <em>\n                                                            <FormattedMessage\n                                                                id='api.gateways'\n                                                                defaultMessage='API Gateways'\n                                                            />\n                                                        </em>\n                                                    </MenuItem>\n                                                )}\n                                                {environments && (\n                                                    environments.map((env) => (\n                                                        <MenuItem value={env} key={env}>\n                                                            {env}\n                                                        </MenuItem>\n                                                    )))}\n                                                {labels && labels.length > 0 && (\n                                                    <MenuItem value='' disabled>\n                                                        <em>\n                                                            <FormattedMessage\n                                                                id='micro.gateways'\n                                                                defaultMessage='Microgateways'\n                                                            />\n                                                        </em>\n                                                    </MenuItem>\n                                                )}\n                                                {labels && (\n                                                    labels.map((label) => (\n                                                        <MenuItem value={label} key={label}>\n                                                            {label}\n                                                        </MenuItem>\n                                                    ))\n                                                )}\n                                            </TextField>\n                                        )}\n                                        </Grid>\n                                    </Box>\n                                    <Box display='block' justifyContent='center'>\n                                        <Grid x={12} md={6} className={classes.tokenType} item>\n                                            {securitySchemeType === 'BASIC' ? (\n                                                <>\n                                                    <TextField\n                                                        margin='normal'\n                                                        variant='outlined'\n                                                        className={classes.usernameField}\n                                                        label={\n                                                            <FormattedMessage id='username' defaultMessage='Username' />\n                                                        }\n                                                        name='username'\n                                                        onChange={this.handleChanges}\n                                                        value={username || ''}\n                                                    />\n                                                    <TextField\n                                                        margin='normal'\n                                                        variant='outlined'\n                                                        className={classes.passwordField}\n                                                        label={\n                                                            <FormattedMessage id='password' defaultMessage='Password' />\n                                                        }\n                                                        name='password'\n                                                        onChange={this.handleChanges}\n                                                        value={password || ''}\n                                                    />\n                                                </>\n                                            ) : (\n                                                <TextField\n                                                    fullWidth\n                                                    margin='normal'\n                                                    variant='outlined'\n                                                    label={(\n                                                        <FormattedMessage\n                                                            id='access.token'\n                                                            sdefaultMessage='Access Token'\n                                                        />\n                                                    )}\n                                                    name='accessToken'\n                                                    onChange={this.handleChanges}\n                                                    type={showToken ? 'text' : 'password'}\n                                                    value={accessToken || ''}\n                                                    helperText={(\n                                                        <FormattedMessage\n                                                            id='enter.access.token'\n                                                            defaultMessage='Enter access Token'\n                                                        />\n                                                    )}\n                                                    InputProps={{\n                                                        endAdornment: (\n                                                            <InputAdornment position='end'>\n                                                                <IconButton\n                                                                    edge='end'\n                                                                    aria-label='Toggle token visibility'\n                                                                    onClick={this.handleClickShowToken}\n                                                                >\n                                                                    {showToken ? <Icon>visibility_off</Icon>\n                                                                        : <Icon>visibility</Icon>}\n                                                                </IconButton>\n                                                            </InputAdornment>\n                                                        ),\n                                                        startAdornment: (\n                                                            <InputAdornment\n                                                                className={classes.inputAdornmentStart}\n                                                                position='start'\n                                                            >\n                                                                {`${authorizationHeader}: ${prefix}`}\n                                                            </InputAdornment>\n                                                        ),\n                                                    }}\n                                                />\n                                            )}\n                                        </Grid>\n                                        <Grid x={12} md={6} className={classes.centerItems}>\n                                            {(isApiKeyEnabled || isBasicAuthEnabled || isOAuthEnabled) && (\n                                                <FormControl component='fieldset'>\n                                                    <RadioGroup\n                                                        name='securityScheme'\n                                                        value={securitySchemeType}\n                                                        onChange={this.handleChanges}\n                                                        row\n                                                    >\n                                                        {isOAuthEnabled && (\n                                                            <FormControlLabel\n                                                                value='OAUTH'\n                                                                control={<Radio />}\n                                                                label='OAuth'\n                                                            />\n                                                        )}\n                                                        {isBasicAuthEnabled && (\n                                                            <FormControlLabel\n                                                                value='BASIC'\n                                                                control={<Radio />}\n                                                                label='Basic'\n                                                            />\n                                                        )}\n                                                        {isApiKeyEnabled && (\n                                                            <FormControlLabel\n                                                                value='API-KEY'\n                                                                control={<Radio />}\n                                                                label='API Key'\n                                                            />\n                                                        )}\n                                                    </RadioGroup>\n                                                </FormControl>\n                                            )}\n                                        </Grid>\n                                    </Box>\n                                </Box>\n                            </Grid>\n                        )}\n\n                        <Grid container>\n                            <Grid xs={10} item />\n                            <Grid xs={2} item>\n                                <a href={downloadLink} download={fileName}>\n                                    <Button size='small'>\n                                        <CloudDownloadRounded className={classes.buttonIcon} />\n                                        <FormattedMessage\n                                            id='Apis.Details.APIConsole.APIConsole.download.swagger'\n                                            defaultMessage='Swagger ( /swagger.json )'\n                                        />\n                                    </Button>\n                                </a>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Paper>\n                <Paper className={classes.paper}>\n                    <SwaggerUI\n                        api={this.state.api}\n                        accessTokenProvider={this.accessTokenProvider}\n                        spec={swagger}\n                        authorizationHeader={authorizationHeader}\n                        securitySchemeType={securitySchemeType}\n                    />\n                </Paper>\n            </>\n        );\n    }\n}\n\nApiConsole.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n        titleSub: PropTypes.string.isRequired,\n        grid: PropTypes.string.isRequired,\n        userNotificationPaper: PropTypes.string.isRequired,\n        inputAdornmentStart: PropTypes.string.isRequired,\n        buttonIcon: PropTypes.string.isRequired,\n        centerItems: PropTypes.string.isRequired,\n    }).isRequired,\n};\n\nApiConsole.contextType = ApiContext;\n\nexport default withStyles(styles)(ApiConsole);\n"],"sourceRoot":""}